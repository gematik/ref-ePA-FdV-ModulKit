//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

/**
* Es handelt sich um eine Pflichtangabe.
*/

public class EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

	/**
	* Gibt den Beginn des Versicherungsschutzes (hier: Leistungsanspruch) des Versicherten bei dem unter Klasse Kostentraeger angegebenen Kostentraeger an.
	*/
    var  Beginn:String=""

	/**
	* Gibt das Datum des Endes der Mitgliedschaft des Versicherten bei dem unter Klasse Kostentraeger angegebenen Kostentraeger an oder das Datum des Fristablaufs bei befristeter Gueltigkeit der Karte.
	* Dieses Feld ist ausschließlich für das beschriebene Datum zu nutzen (gemäß § 291 SGB V).
	*/
    var  Ende:String?

    var  Kostentraeger:EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz_Kostentraeger=EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz_Kostentraeger()

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __BeginnItemElement=__request.writeElement(obj: Beginn, type:String.self, name:"Beginn", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __BeginnItemElement != nil
        {
            __BeginnItemElement!.stringValue = self.Beginn;
        }
            
        let __EndeItemElement=__request.writeElement(obj: Ende, type:String.self, name:"Ende", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __EndeItemElement != nil
        {
            __EndeItemElement!.stringValue = self.Ende!;
        }
            
        let __KostentraegerItemElement=__request.writeElement(obj: Kostentraeger, type:EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz_Kostentraeger.self, name:"Kostentraeger", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __KostentraegerItemElement != nil
        {
            self.Kostentraeger.serialize(__parent: __KostentraegerItemElement!, __request: __request);
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="Beginn"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Beginn")
            {
                self.Beginn = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Ende"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Ende")
            {
                self.Ende = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Kostentraeger"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Kostentraeger")
            {
                self.Kostentraeger = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz_Kostentraeger.self) as! EPA_FdV_AUTHZ_UC_AllgemeineVersicherungsdatenXML_Versicherter_Versicherungsschutz_Kostentraeger
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}