//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_GLIST_PQ : EPA_FdV_AUTHZ_ANY 
{
    

	/**
	* This is the start-value of the generated list.
	*/
    var  head:EPA_FdV_AUTHZ_PQ=EPA_FdV_AUTHZ_PQ()

	/**
	* The difference between one value and its previous
	*                      different value. For example, to generate the sequence
	*                      (1; 4; 7; 10; 13; ...) the increment is 3; likewise to
	*                      generate the sequence (1; 1; 4; 4; 7; 7; 10; 10; 13;
	*                      13; ...) the increment is also 3.
	*/
    var  increment:EPA_FdV_AUTHZ_PQ=EPA_FdV_AUTHZ_PQ()

	/**
	* If non-NULL, specifies that the sequence alternates,
	*                      i.e., after this many increments, the sequence item
	*                      values roll over to start from the initial sequence
	*                      item value. For example, the sequence (1; 2; 3; 1; 2;
	*                      3; 1; 2; 3; ...) has period 3; also the sequence
	*                      (1; 1; 2; 2; 3; 3; 1; 1; 2; 2; 3; 3; ...) has period
	*                      3 too.
	*/
    var  period:NSNumber?

	/**
	* The integer by which the index for the sequence is
	*                      divided, effectively the number of times the sequence
	*                      generates the same sequence item value before
	*                      incrementing to the next sequence item value. For
	*                      example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
	*                      3; ...)  the denominator is 3.
	*/
    var  denominator:NSNumber?

    public required init()
    {
        super.init()
    }
    public override func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.loadWithXml(__node:__node, __request: __request)
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"period", url:"")
        {
            self.period = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"period", url:"")!.stringValue, isDecimal:false)!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"denominator", url:"")
        {
            self.denominator = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"denominator", url:"")!.stringValue, isDecimal:false)!
        }
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        let __headItemElement=__request.writeElement(obj: head, type:EPA_FdV_AUTHZ_PQ.self, name:"head", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
        if __headItemElement != nil
        {
            self.head.serialize(__parent: __headItemElement!, __request: __request);
        }
            
        let __incrementItemElement=__request.writeElement(obj: increment, type:EPA_FdV_AUTHZ_PQ.self, name:"increment", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
        if __incrementItemElement != nil
        {
            self.increment.serialize(__parent: __incrementItemElement!, __request: __request);
        }
            
        if self.period != nil
        {
            let __periodItemElement=__request.addAttribute(name: "period", URI:"", stringValue:"", element:__parent)
            __periodItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromNumber(number: self.period!);
        }
            
        if self.denominator != nil
        {
            let __denominatorItemElement=__request.addAttribute(name: "denominator", URI:"", stringValue:"", element:__parent)
            __denominatorItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromNumber(number: self.denominator!);
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="head"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "head")
            {
                self.head = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_PQ.self) as! EPA_FdV_AUTHZ_PQ
            }
            return true;
        }
        if __node.localName=="increment"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "increment")
            {
                self.increment = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_PQ.self) as! EPA_FdV_AUTHZ_PQ
            }
            return true;
        }
        if __node.localName=="period"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "period")
            {
                self.period = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: __node.stringValue, isDecimal:false)!
            }
            return true;
        }
        if __node.localName=="denominator"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "denominator")
            {
                self.denominator = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: __node.stringValue, isDecimal:false)!
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}