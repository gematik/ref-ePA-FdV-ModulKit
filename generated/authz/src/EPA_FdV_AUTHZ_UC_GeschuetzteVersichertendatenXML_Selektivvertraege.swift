//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_UC_GeschuetzteVersichertendatenXML_Selektivvertraege : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

	/**
	* Gibt an, ob fuer den Versicherten ein aerztlicher Selektivvertrag vorliegt.
	* Dieses Datenfeld ist besonders schuetzenswert und daher nicht frei auslesbar, sondern nur berechtigten Personen zugaenglich.
	* Schluesselverzeichnis:
	* 1 = aerztlicher Selektivvertrag liegt vor
	* 0 = aerztlicher Selektivvertrag liegt nicht vor 
	* 9 = aerztliches Selektivvertragskennzeichen wird nicht genutzt
	*/
    var  Aerztlich:NSNumber=NSNumber(value:0)

	/**
	* Gibt an, ob fuer den Versicherten ein zahnaerztlicher Selektivvertrag vorliegt.
	* Dieses Datenfeld ist besonders schuetzenswert und daher nicht frei auslesbar, sondern nur berechtigten Personen zugaenglich.
	* Schluesselverzeichnis:
	* 1 = zahnaerztlicher Selektivvertrag liegt vor
	* 0 = zahnaerztlicher Selektivvertrag liegt nicht vor 
	* 9 = zahnaerztliches Selektivvertragskennzeichen wird nicht genutzt
	*/
    var  Zahnaerztlich:NSNumber=NSNumber(value:0)

	/**
	* Gibt die Paragraphen des  SGB V an, in denen Selektivvertraege beschrieben sind.
	* Die Angaben gelten fuer folgende Selektivvertraege:
	* 1. Stelle: Hausarztzentrierte Versorgung (§73b)
	* 2. Stelle: nicht besetzt
	* 3. Stelle: Strukturierte Behandlungsprogramme (§137f)
	* 4. Stelle: Integrierte Versorgung (§140a)
	* Die Stellen 1 und 3 koennen den Wert = 1 (true) nur annehmen, wenn Aerztlich = 1 (true) ist.
	* 
	* Die Stelle 4 kann sowohl zur Kennzeichnung aerztlicher als auch zahnaerztlicher Selektivvertraege genutzt werden.
	* Beispiel: 1000
	* Es liegt ein Selektivvertrag fuer die Hausarztzentrierte Versorgung nach §73b vor.
	* In der Testphase koennen die Krankenkassen im geschuetzten Bereich die Paragraphen des SGB V, in denen Selektivvertraege beschrieben sind (§§73b, 137f, 140a), im Rahmen der offenen Speicherkapazitaet abbilden.
	*/
    var  Art:String?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __AerztlichItemElement=__request.writeElement(obj: Aerztlich, type:NSNumber.self, name:"Aerztlich", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __AerztlichItemElement != nil
        {
            __AerztlichItemElement!.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromNumber(number: self.Aerztlich);
        }
            
        let __ZahnaerztlichItemElement=__request.writeElement(obj: Zahnaerztlich, type:NSNumber.self, name:"Zahnaerztlich", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __ZahnaerztlichItemElement != nil
        {
            __ZahnaerztlichItemElement!.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromNumber(number: self.Zahnaerztlich);
        }
            
        let __ArtItemElement=__request.writeElement(obj: Art, type:String.self, name:"Art", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __ArtItemElement != nil
        {
            __ArtItemElement!.stringValue = self.Art!;
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="Aerztlich"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Aerztlich")
            {
                self.Aerztlich = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: __node.stringValue, isDecimal:false)!
            }
            return true;
        }
        if __node.localName=="Zahnaerztlich"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Zahnaerztlich")
            {
                self.Zahnaerztlich = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: __node.stringValue, isDecimal:false)!
            }
            return true;
        }
        if __node.localName=="Art"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Art")
            {
                self.Art = __node.stringValue!
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}