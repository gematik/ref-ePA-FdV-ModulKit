//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------


import Foundation

/**
* abstDomain: A13104 (C-0-T12839-A13104-cpt)
*/

public enum EPA_FdV_AUTHZ_UnitOfMeasurePrefixSens:Int,CustomStringConvertible
{
    case  a
    case  c
    case  d
    case  da
    case  E
    case  f
    case  Gi
    case  G
    case  h
    case  Ki
    case  k
    case  Mi
    case  M
    case  u
    case  m_1
    case  n
    case  P
    case  p_1
    case  Ti
    case  T
    case  y
    case  Y_1
    case  z
    case  Z_1

    static func createWithXml(node:DDXMLNode) -> EPA_FdV_AUTHZ_UnitOfMeasurePrefixSens?
    {
        return createWithString(value: node.stringValue!)
    }

    static func createWithString(value:String) -> EPA_FdV_AUTHZ_UnitOfMeasurePrefixSens?
    {
        var i = 0
        while let item = EPA_FdV_AUTHZ_UnitOfMeasurePrefixSens(rawValue: i) 
        {
            if String(describing: item) == value
            {
                return item
            }
            i += 1
        }
       return nil
    }

    public var stringValue : String
    {
        return description
    }

    public var description : String
    {
        switch self
        {
            case  .a: return "a"
            case  .c: return "c"
            case  .d: return "d"
            case  .da: return "da"
            case  .E: return "E"
            case  .f: return "f"
            case  .Gi: return "Gi"
            case  .G: return "G"
            case  .h: return "h"
            case  .Ki: return "Ki"
            case  .k: return "k"
            case  .Mi: return "Mi"
            case  .M: return "M"
            case  .u: return "u"
            case  .m_1: return "m"
            case  .n: return "n"
            case  .P: return "P"
            case  .p_1: return "p"
            case  .Ti: return "Ti"
            case  .T: return "T"
            case  .y: return "y"
            case  .Y_1: return "Y"
            case  .z: return "z"
            case  .Z_1: return "Z"
        }
    }

    public func getValue() -> Int
    {
        return rawValue
    }

    func serialize(__parent:DDXMLNode)
    {
        __parent.stringValue = stringValue
    }
}


        
