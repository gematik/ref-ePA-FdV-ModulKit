//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

	/**
	* Gibt das Geburtsdatum des Versicherten an.
	* Hinweis: Das Geburtsjahr MUSS immer gefuellt werden. Bei Inlaendern ist immer ein logisch richtiges Geburtsdatum anzugeben. Bei Auslaendern gilt folgendes: Zumindest das Geburtsjahr ist immer anzugeben. Im Geburtstag oder im Geburtstag und im Geburtsmonat ist bei Ausländern „00“ bzw. „0000“ zulässig, wenn der Geburtstag und der Geburtsmonat nicht zu ermitteln sind.
	*/
    var  Geburtsdatum:String=""

	/**
	* Gibt den Vornamen der Person an.
	* Alle Vornamen der Person (max. 5) werden eingegeben. Mehrere Vornamen werden durch Leerzzeichen oder Bindestrich getrennt.
	*/
    var  Vorname:String=""

	/**
	* Gibt den Nachnamen der Person an.
	*/
    var  Nachname:String=""

	/**
	* Gibt das Geschlecht des Versicherten an. ("M" = maennlich, "W" = weiblich, "X" = unbestimmt, "D" = divers).
	*/
    var  Geschlecht:String=""

	/**
	* Gibt die Vorsatzwoerter der Person an.
	* Mehrere Vorsatzwörter werden durch Leerzeichen getrennt angegeben.
	* Anlage 6 (Tabelle der gültigen Vorsatzworte) zur DEÜV, siehe www.gkv-datenaustausch.de/arbeitgeber/deuev/gemeinsame_rundschreiben/gemeinsame_rundschreiben.jsp
	*/
    var  Vorsatzwort:String?

	/**
	* Gibt die Namenszusaetze der Person an, z. B.: Freiherr
	* Mehrere Namenzusätze werden durch Leerzeichen getrennt angegeben.
	* Anlage 7 (Tabelle der gültigen Namenszusätze) zur DEÜV, siehe www.gkv-datenaustausch.de/arbeitgeber/deuev/gemeinsame_rundschreiben/gemeinsame_rundschreiben.jsp
	*/
    var  Namenszusatz:String?

	/**
	* Gibt die akademischen Grade der Person an.
	* Mehrere Titel werden durch Leerzeichen getrennt angegeben.
	*/
    var  Titel:String?

    var  PostfachAdresse:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_PostfachAdresse?

    var  StrassenAdresse:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_StrassenAdresse?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __GeburtsdatumItemElement=__request.writeElement(obj: Geburtsdatum, type:String.self, name:"Geburtsdatum", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __GeburtsdatumItemElement != nil
        {
            __GeburtsdatumItemElement!.stringValue = self.Geburtsdatum;
        }
            
        let __VornameItemElement=__request.writeElement(obj: Vorname, type:String.self, name:"Vorname", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __VornameItemElement != nil
        {
            __VornameItemElement!.stringValue = self.Vorname;
        }
            
        let __NachnameItemElement=__request.writeElement(obj: Nachname, type:String.self, name:"Nachname", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __NachnameItemElement != nil
        {
            __NachnameItemElement!.stringValue = self.Nachname;
        }
            
        let __GeschlechtItemElement=__request.writeElement(obj: Geschlecht, type:String.self, name:"Geschlecht", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:false)
        if __GeschlechtItemElement != nil
        {
            __GeschlechtItemElement!.stringValue = self.Geschlecht;
        }
            
        let __VorsatzwortItemElement=__request.writeElement(obj: Vorsatzwort, type:String.self, name:"Vorsatzwort", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __VorsatzwortItemElement != nil
        {
            __VorsatzwortItemElement!.stringValue = self.Vorsatzwort!;
        }
            
        let __NamenszusatzItemElement=__request.writeElement(obj: Namenszusatz, type:String.self, name:"Namenszusatz", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __NamenszusatzItemElement != nil
        {
            __NamenszusatzItemElement!.stringValue = self.Namenszusatz!;
        }
            
        let __TitelItemElement=__request.writeElement(obj: Titel, type:String.self, name:"Titel", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __TitelItemElement != nil
        {
            __TitelItemElement!.stringValue = self.Titel!;
        }
            
        let __PostfachAdresseItemElement=__request.writeElement(obj: PostfachAdresse, type:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_PostfachAdresse.self, name:"PostfachAdresse", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __PostfachAdresseItemElement != nil
        {
            self.PostfachAdresse!.serialize(__parent: __PostfachAdresseItemElement!, __request: __request);
        }
            
        let __StrassenAdresseItemElement=__request.writeElement(obj: StrassenAdresse, type:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_StrassenAdresse.self, name:"StrassenAdresse", URI:"http://ws.gematik.de/fa/vsdm/vsd/v5.2", parent:__parent, skipNullProperty:true)
        if __StrassenAdresseItemElement != nil
        {
            self.StrassenAdresse!.serialize(__parent: __StrassenAdresseItemElement!, __request: __request);
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="Geburtsdatum"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Geburtsdatum")
            {
                self.Geburtsdatum = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Vorname"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Vorname")
            {
                self.Vorname = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Nachname"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Nachname")
            {
                self.Nachname = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Geschlecht"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Geschlecht")
            {
                self.Geschlecht = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Vorsatzwort"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Vorsatzwort")
            {
                self.Vorsatzwort = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Namenszusatz"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Namenszusatz")
            {
                self.Namenszusatz = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Titel"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Titel")
            {
                self.Titel = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="PostfachAdresse"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "PostfachAdresse")
            {
                self.PostfachAdresse = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_PostfachAdresse.self) as? EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_PostfachAdresse
            }
            return true;
        }
        if __node.localName=="StrassenAdresse"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "StrassenAdresse")
            {
                self.StrassenAdresse = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_StrassenAdresse.self) as? EPA_FdV_AUTHZ_UC_PersoenlicheVersichertendatenXML_Versicherter_Person_StrassenAdresse
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}