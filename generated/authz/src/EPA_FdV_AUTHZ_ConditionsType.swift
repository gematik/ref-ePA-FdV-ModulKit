//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_ConditionsType : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var Condition:[EPA_FdV_AUTHZ_ConditionAbstractType?]? = []

    var AudienceRestriction:[EPA_FdV_AUTHZ_AudienceRestrictionType?]? = []

    var OneTimeUse:[EPA_FdV_AUTHZ_OneTimeUseType?]? = []

    var ProxyRestriction:[EPA_FdV_AUTHZ_ProxyRestrictionType?]? = []

    var  NotBefore:Date?

    var  NotOnOrAfter:Date?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"NotBefore", url:"")
        {
            self.NotBefore = EPA_FdV_AUTHZ_Helper.getDate(stringDate: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"NotBefore", url:"")!.stringValue)
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"NotOnOrAfter", url:"")
        {
            self.NotOnOrAfter = EPA_FdV_AUTHZ_Helper.getDate(stringDate: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"NotOnOrAfter", url:"")!.stringValue)
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        if self.Condition != nil
        {
            for __item in self.Condition!
            {
                let __ConditionItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_ConditionAbstractType.self, name:"Condition", URI:"urn:oasis:names:tc:SAML:2.0:assertion", parent:__parent, skipNullProperty:false)
                if __ConditionItemElement != nil
                {
                    __item!.serialize(__parent: __ConditionItemElement!, __request: __request);
                }
            }
        }
            
        if self.AudienceRestriction != nil
        {
            for __item in self.AudienceRestriction!
            {
                let __AudienceRestrictionItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_AudienceRestrictionType.self, name:"AudienceRestriction", URI:"urn:oasis:names:tc:SAML:2.0:assertion", parent:__parent, skipNullProperty:false)
                if __AudienceRestrictionItemElement != nil
                {
                    __item!.serialize(__parent: __AudienceRestrictionItemElement!, __request: __request);
                }
            }
        }
            
        if self.OneTimeUse != nil
        {
            for __item in self.OneTimeUse!
            {
                let __OneTimeUseItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_OneTimeUseType.self, name:"OneTimeUse", URI:"urn:oasis:names:tc:SAML:2.0:assertion", parent:__parent, skipNullProperty:false)
                if __OneTimeUseItemElement != nil
                {
                    __item!.serialize(__parent: __OneTimeUseItemElement!, __request: __request);
                }
            }
        }
            
        if self.ProxyRestriction != nil
        {
            for __item in self.ProxyRestriction!
            {
                let __ProxyRestrictionItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_ProxyRestrictionType.self, name:"ProxyRestriction", URI:"urn:oasis:names:tc:SAML:2.0:assertion", parent:__parent, skipNullProperty:false)
                if __ProxyRestrictionItemElement != nil
                {
                    __item!.serialize(__parent: __ProxyRestrictionItemElement!, __request: __request);
                }
            }
        }
            
        if self.NotBefore != nil
        {
            let __NotBeforeItemElement=__request.addAttribute(name: "NotBefore", URI:"", stringValue:"", element:__parent)
            __NotBeforeItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromDateTime(date: self.NotBefore!);
        }
            
        if self.NotOnOrAfter != nil
        {
            let __NotOnOrAfterItemElement=__request.addAttribute(name: "NotOnOrAfter", URI:"", stringValue:"", element:__parent)
            __NotOnOrAfterItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromDateTime(date: self.NotOnOrAfter!);
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="Condition"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Condition")
            {
                if self.Condition == nil
                {
                    self.Condition = []
                }
                self.Condition!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_ConditionAbstractType.self) as? EPA_FdV_AUTHZ_ConditionAbstractType)
            }
            return true;
        }
        if __node.localName=="AudienceRestriction"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "AudienceRestriction")
            {
                if self.AudienceRestriction == nil
                {
                    self.AudienceRestriction = []
                }
                self.AudienceRestriction!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_AudienceRestrictionType.self) as? EPA_FdV_AUTHZ_AudienceRestrictionType)
            }
            return true;
        }
        if __node.localName=="OneTimeUse"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "OneTimeUse")
            {
                if self.OneTimeUse == nil
                {
                    self.OneTimeUse = []
                }
                self.OneTimeUse!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_OneTimeUseType.self) as? EPA_FdV_AUTHZ_OneTimeUseType)
            }
            return true;
        }
        if __node.localName=="ProxyRestriction"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "ProxyRestriction")
            {
                if self.ProxyRestriction == nil
                {
                    self.ProxyRestriction = []
                }
                self.ProxyRestriction!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_ProxyRestrictionType.self) as? EPA_FdV_AUTHZ_ProxyRestrictionType)
            }
            return true;
        }
        if __node.localName=="NotBefore"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "NotBefore")
            {
                self.NotBefore = EPA_FdV_AUTHZ_Helper.getDate(stringDate: __node.stringValue)
            }
            return true;
        }
        if __node.localName=="NotOnOrAfter"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "NotOnOrAfter")
            {
                self.NotOnOrAfter = EPA_FdV_AUTHZ_Helper.getDate(stringDate: __node.stringValue)
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}