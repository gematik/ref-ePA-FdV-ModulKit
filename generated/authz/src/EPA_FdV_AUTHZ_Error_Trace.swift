//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_Error_Trace : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  EventID:String=""

    var  Instance:String=""

    var  LogReference:String=""

    var  CompType:String=""

    var  Code:NSNumber=NSNumber(value:0)

    var  Severity:String=""

    var  ErrorType:String=""

    var  ErrorText:String=""

    var  Detail:EPA_FdV_AUTHZ_Error_Trace_Detail?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __EventIDItemElement=__request.writeElement(obj: EventID, type:String.self, name:"EventID", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __EventIDItemElement != nil
        {
            __EventIDItemElement!.stringValue = self.EventID;
        }
            
        let __InstanceItemElement=__request.writeElement(obj: Instance, type:String.self, name:"Instance", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __InstanceItemElement != nil
        {
            __InstanceItemElement!.stringValue = self.Instance;
        }
            
        let __LogReferenceItemElement=__request.writeElement(obj: LogReference, type:String.self, name:"LogReference", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __LogReferenceItemElement != nil
        {
            __LogReferenceItemElement!.stringValue = self.LogReference;
        }
            
        let __CompTypeItemElement=__request.writeElement(obj: CompType, type:String.self, name:"CompType", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __CompTypeItemElement != nil
        {
            __CompTypeItemElement!.stringValue = self.CompType;
        }
            
        let __CodeItemElement=__request.writeElement(obj: Code, type:NSNumber.self, name:"Code", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __CodeItemElement != nil
        {
            __CodeItemElement!.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromNumber(number: self.Code);
        }
            
        let __SeverityItemElement=__request.writeElement(obj: Severity, type:String.self, name:"Severity", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __SeverityItemElement != nil
        {
            __SeverityItemElement!.stringValue = self.Severity;
        }
            
        let __ErrorTypeItemElement=__request.writeElement(obj: ErrorType, type:String.self, name:"ErrorType", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __ErrorTypeItemElement != nil
        {
            __ErrorTypeItemElement!.stringValue = self.ErrorType;
        }
            
        let __ErrorTextItemElement=__request.writeElement(obj: ErrorText, type:String.self, name:"ErrorText", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:false)
        if __ErrorTextItemElement != nil
        {
            __ErrorTextItemElement!.stringValue = self.ErrorText;
        }
            
        let __DetailItemElement=__request.writeElement(obj: Detail, type:EPA_FdV_AUTHZ_Error_Trace_Detail.self, name:"Detail", URI:"http://ws.gematik.de/tel/error/v2.0", parent:__parent, skipNullProperty:true)
        if __DetailItemElement != nil
        {
            self.Detail!.serialize(__parent: __DetailItemElement!, __request: __request);
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="EventID"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventID")
            {
                self.EventID = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Instance"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Instance")
            {
                self.Instance = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="LogReference"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "LogReference")
            {
                self.LogReference = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="CompType"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "CompType")
            {
                self.CompType = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Code"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Code")
            {
                self.Code = EPA_FdV_AUTHZ_Helper.getNumber(stringNumber: __node.stringValue, isDecimal:false)!
            }
            return true;
        }
        if __node.localName=="Severity"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Severity")
            {
                self.Severity = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="ErrorType"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "ErrorType")
            {
                self.ErrorType = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="ErrorText"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "ErrorText")
            {
                self.ErrorText = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="Detail"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "Detail")
            {
                self.Detail = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_Error_Trace_Detail.self) as? EPA_FdV_AUTHZ_Error_Trace_Detail
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}