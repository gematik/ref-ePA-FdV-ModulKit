//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

/**
* An identifier that uniquely identifies a thing or object.
*                 Examples are object identifier for HL7 RIM objects,
*                 medical record number, order id, service catalog item id,
*                 Vehicle Identification Number (VIN), etc. Instance
*                 identifiers are defined based on ISO object identifiers.
*/

public class EPA_FdV_AUTHZ_II : EPA_FdV_AUTHZ_ANY 
{
    

	/**
	* A unique identifier that guarantees the global uniqueness
	*                             of the instance identifier. The root alone may be the
	*                             entire instance identifier.
	*/
    var  root:String?

	/**
	* A character string as a unique identifier within the
	*                             scope of the identifier root.
	*/
    var  extension:String?

	/**
	* A human readable name or mnemonic for the assigning
	*                             authority. This name may be provided solely for the
	*                             convenience of unaided humans interpreting an  value
	*                             and can have no computational meaning. Note: no
	*                             automated processing must depend on the assigning
	*                             authority name to be present in any form.
	*/
    var  assigningAuthorityName:String?

	/**
	* Specifies if the identifier is intended for human
	*                             display and data entry (displayable = true) as
	*                             opposed to pure machine interoperation (displayable
	*                             = false).
	*/
    var  displayable:Bool?

    public required init()
    {
        super.init()
    }
    public override func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.loadWithXml(__node:__node, __request: __request)
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"root", url:"")
        {
            self.root = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"root", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"extension", url:"")
        {
            self.extension = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"extension", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"assigningAuthorityName", url:"")
        {
            self.assigningAuthorityName = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"assigningAuthorityName", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"displayable", url:"")
        {
            self.displayable = EPA_FdV_AUTHZ_Helper.toBoolFromString(str: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"displayable", url:"")!.stringValue!)
        }
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        if self.root != nil
        {
            let __rootItemElement=__request.addAttribute(name: "root", URI:"", stringValue:"", element:__parent)
            __rootItemElement.stringValue = self.root!;
        }
            
        if self.extension != nil
        {
            let __extensionItemElement=__request.addAttribute(name: "extension", URI:"", stringValue:"", element:__parent)
            __extensionItemElement.stringValue = self.extension!;
        }
            
        if self.assigningAuthorityName != nil
        {
            let __assigningAuthorityNameItemElement=__request.addAttribute(name: "assigningAuthorityName", URI:"", stringValue:"", element:__parent)
            __assigningAuthorityNameItemElement.stringValue = self.assigningAuthorityName!;
        }
            
        if self.displayable != nil
        {
            let __displayableItemElement=__request.addAttribute(name: "displayable", URI:"", stringValue:"", element:__parent)
            __displayableItemElement.stringValue = EPA_FdV_AUTHZ_Helper.toBoolStringFromNumber(boolNumber: self.displayable! as NSNumber);
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="root"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "root")
            {
                self.root = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="extension"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "extension")
            {
                self.extension = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="assigningAuthorityName"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "assigningAuthorityName")
            {
                self.assigningAuthorityName = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="displayable"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "displayable")
            {
                self.displayable = EPA_FdV_AUTHZ_Helper.toBoolFromString(str: __node.stringValue!)
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}