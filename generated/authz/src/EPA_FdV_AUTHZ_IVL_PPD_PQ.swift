//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_IVL_PPD_PQ : EPA_FdV_AUTHZ_SXCM_PPD_PQ 
{
    

	/**
	* The low limit of the interval.
	*/
    var  low:EPA_FdV_AUTHZ_IVXB_PPD_PQ=EPA_FdV_AUTHZ_IVXB_PPD_PQ()

	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    var  width:EPA_FdV_AUTHZ_PPD_PQ?

	/**
	* The high limit of the interval.
	*/
    var  high:EPA_FdV_AUTHZ_IVXB_PPD_PQ?

    var  high_1:EPA_FdV_AUTHZ_IVXB_PPD_PQ?

	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    var  width_1:EPA_FdV_AUTHZ_PPD_PQ=EPA_FdV_AUTHZ_PPD_PQ()

	/**
	* The high limit of the interval.
	*/
    var  high_2:EPA_FdV_AUTHZ_IVXB_PPD_PQ?

	/**
	* The arithmetic mean of the interval (low plus high
	*                            divided by 2). The purpose of distinguishing the center
	*                            as a semantic property is for conversions of intervals
	*                            from and to point values.
	*/
    var  center:EPA_FdV_AUTHZ_PPD_PQ=EPA_FdV_AUTHZ_PPD_PQ()

	/**
	* The difference between high and low boundary. The
	*                            purpose of distinguishing a width property is to
	*                            handle all cases of incomplete information
	*                            symmetrically. In any interval representation only
	*                            two of the three properties high, low, and width need
	*                            to be stated and the third can be derived.
	*/
    var  width_2:EPA_FdV_AUTHZ_PPD_PQ?

    public required init()
    {
        super.init()
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        let __lowItemElement=__request.writeElement(obj: low, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self, name:"low", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
        if __lowItemElement != nil
        {
            self.low.serialize(__parent: __lowItemElement!, __request: __request);
        }
            
        let __widthItemElement=__request.writeElement(obj: width, type:EPA_FdV_AUTHZ_PPD_PQ.self, name:"width", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __widthItemElement != nil
        {
            self.width!.serialize(__parent: __widthItemElement!, __request: __request);
        }
            
        let __highItemElement=__request.writeElement(obj: high, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self, name:"high", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __highItemElement != nil
        {
            self.high!.serialize(__parent: __highItemElement!, __request: __request);
        }
            
        let __high_1ItemElement=__request.writeElement(obj: high_1, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self, name:"high", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __high_1ItemElement != nil
        {
            self.high_1!.serialize(__parent: __high_1ItemElement!, __request: __request);
        }
            
        let __width_1ItemElement=__request.writeElement(obj: width_1, type:EPA_FdV_AUTHZ_PPD_PQ.self, name:"width", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
        if __width_1ItemElement != nil
        {
            self.width_1.serialize(__parent: __width_1ItemElement!, __request: __request);
        }
            
        let __high_2ItemElement=__request.writeElement(obj: high_2, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self, name:"high", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __high_2ItemElement != nil
        {
            self.high_2!.serialize(__parent: __high_2ItemElement!, __request: __request);
        }
            
        let __centerItemElement=__request.writeElement(obj: center, type:EPA_FdV_AUTHZ_PPD_PQ.self, name:"center", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
        if __centerItemElement != nil
        {
            self.center.serialize(__parent: __centerItemElement!, __request: __request);
        }
            
        let __width_2ItemElement=__request.writeElement(obj: width_2, type:EPA_FdV_AUTHZ_PPD_PQ.self, name:"width", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __width_2ItemElement != nil
        {
            self.width_2!.serialize(__parent: __width_2ItemElement!, __request: __request);
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if(__node.localName == "width")
        {
            var __temp:DDXMLNode?=nil
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"width", index:0)
            if __temp != nil && __temp!.index == __node.index
            {
                self.width = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_PPD_PQ.self) as? EPA_FdV_AUTHZ_PPD_PQ
                return true
            }
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"width", index:1)
            if __temp != nil && __temp!.index == __node.index
            {
                self.width_1 = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_PPD_PQ.self) as! EPA_FdV_AUTHZ_PPD_PQ
                return true
            }
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"width", index:2)
            if __temp != nil && __temp!.index == __node.index
            {
                self.width_2 = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_PPD_PQ.self) as? EPA_FdV_AUTHZ_PPD_PQ
                return true
            }
        }
        if(__node.localName == "high")
        {
            var __temp:DDXMLNode?=nil
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"high", index:0)
            if __temp != nil && __temp!.index == __node.index
            {
                self.high = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self) as? EPA_FdV_AUTHZ_IVXB_PPD_PQ
                return true
            }
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"high", index:1)
            if __temp != nil && __temp!.index == __node.index
            {
                self.high_1 = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self) as? EPA_FdV_AUTHZ_IVXB_PPD_PQ
                return true
            }
            __temp=EPA_FdV_AUTHZ_Helper.getNode(node: (__node.parent as! DDXMLElement), name:"high", index:2)
            if __temp != nil && __temp!.index == __node.index
            {
                self.high_2 = try! __request.createObject(node: __temp!, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self) as? EPA_FdV_AUTHZ_IVXB_PPD_PQ
                return true
            }
        }
        if __node.localName=="low"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "low")
            {
                self.low = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_IVXB_PPD_PQ.self) as! EPA_FdV_AUTHZ_IVXB_PPD_PQ
            }
            return true;
        }
        if __node.localName=="center"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "center")
            {
                self.center = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_PPD_PQ.self) as! EPA_FdV_AUTHZ_PPD_PQ
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}