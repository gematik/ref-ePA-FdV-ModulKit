//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_EventIdentificationType : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  EventID:EPA_FdV_AUTHZ_CodedValueType=EPA_FdV_AUTHZ_CodedValueType()

    var EventTypeCode:[EPA_FdV_AUTHZ_CodedValueType?]? = []

    var  EventActionCode:EPA_FdV_AUTHZ_EventIdentificationType_EventActionCode?

    var  EventDateTime:Date=Date()

    var  EventOutcomeIndicator:EPA_FdV_AUTHZ_EventIdentificationType_EventOutcomeIndicator=EPA_FdV_AUTHZ_EventIdentificationType_EventOutcomeIndicator._0

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"EventActionCode", url:"")
        {
            self.EventActionCode = EPA_FdV_AUTHZ_EventIdentificationType_EventActionCode.createWithXml(node: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"EventActionCode", url:"")!)!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"EventDateTime", url:"")
        {
            self.EventDateTime = EPA_FdV_AUTHZ_Helper.getDate(stringDate: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"EventDateTime", url:"")!.stringValue)!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"EventOutcomeIndicator", url:"")
        {
            self.EventOutcomeIndicator = EPA_FdV_AUTHZ_EventIdentificationType_EventOutcomeIndicator.createWithXml(node: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"EventOutcomeIndicator", url:"")!)!
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __EventIDItemElement=__request.writeElement(obj: EventID, type:EPA_FdV_AUTHZ_CodedValueType.self, name:"EventID", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
        if __EventIDItemElement != nil
        {
            self.EventID.serialize(__parent: __EventIDItemElement!, __request: __request);
        }
            
        if self.EventTypeCode != nil
        {
            for __item in self.EventTypeCode!
            {
                let __EventTypeCodeItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_CodedValueType.self, name:"EventTypeCode", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
                if __EventTypeCodeItemElement != nil
                {
                    __item!.serialize(__parent: __EventTypeCodeItemElement!, __request: __request);
                }
            }
        }
            
        if self.EventActionCode != nil
        {
            let __EventActionCodeItemElement=__request.addAttribute(name: "EventActionCode", URI:"", stringValue:"", element:__parent)
            self.EventActionCode!.serialize(__parent: __EventActionCodeItemElement);
        }
            
        let __EventDateTimeItemElement=__request.addAttribute(name: "EventDateTime", URI:"", stringValue:"", element:__parent)
        __EventDateTimeItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromDateTime(date: self.EventDateTime);    
            
        let __EventOutcomeIndicatorItemElement=__request.addAttribute(name: "EventOutcomeIndicator", URI:"", stringValue:"", element:__parent)
        self.EventOutcomeIndicator.serialize(__parent: __EventOutcomeIndicatorItemElement);    

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="EventID"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventID")
            {
                self.EventID = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_CodedValueType.self) as! EPA_FdV_AUTHZ_CodedValueType
            }
            return true;
        }
        if __node.localName=="EventTypeCode"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventTypeCode")
            {
                if self.EventTypeCode == nil
                {
                    self.EventTypeCode = []
                }
                self.EventTypeCode!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_CodedValueType.self) as? EPA_FdV_AUTHZ_CodedValueType)
            }
            return true;
        }
        if __node.localName=="EventActionCode"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventActionCode")
            {
                self.EventActionCode = EPA_FdV_AUTHZ_EventIdentificationType_EventActionCode.createWithXml(node: __node)!
            }
            return true;
        }
        if __node.localName=="EventDateTime"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventDateTime")
            {
                self.EventDateTime = EPA_FdV_AUTHZ_Helper.getDate(stringDate: __node.stringValue)!
            }
            return true;
        }
        if __node.localName=="EventOutcomeIndicator"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EventOutcomeIndicator")
            {
                self.EventOutcomeIndicator = EPA_FdV_AUTHZ_EventIdentificationType_EventOutcomeIndicator.createWithXml(node: __node)!
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}