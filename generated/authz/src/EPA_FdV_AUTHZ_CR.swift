//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

/**
* A concept qualifier code with optionally named role.
*                 Both qualifier role and value codes must be defined by
*                 the coding system.  For example, if SNOMED RT defines a
*                 concept "leg", a role relation "has-laterality", and
*                 another concept "left", the concept role relation allows
*                 to add the qualifier "has-laterality: left" to a primary
*                 code "leg" to construct the meaning "left leg".
*/

public class EPA_FdV_AUTHZ_CR : EPA_FdV_AUTHZ_ANY 
{
    

	/**
	* Specifies the manner in which the concept role value
	*                                 contributes to the meaning of a code phrase.  For
	*                                 example, if SNOMED RT defines a concept "leg", a role
	*                                 relation "has-laterality", and another concept "left",
	*                                 the concept role relation allows to add the qualifier
	*                                 "has-laterality: left" to a primary code "leg" to
	*                                 construct the meaning "left leg".  In this example
	*                                 "has-laterality" is .
	*/
    var  name:EPA_FdV_AUTHZ_CV?

	/**
	* The concept that modifies the primary code of a code
	*                                 phrase through the role relation.  For example, if
	*                                 SNOMED RT defines a concept "leg", a role relation
	*                                 "has-laterality", and another concept "left", the
	*                                 concept role relation allows adding the qualifier
	*                                 "has-laterality: left" to a primary code "leg" to
	*                                 construct the meaning "left leg".  In this example
	*                                 "left" is .
	*/
    var  value:EPA_FdV_AUTHZ_CD?

	/**
	* Indicates if the sense of the role name is inverted.
	*                             This can be used in cases where the underlying code
	*                             system defines inversion but does not provide reciprocal
	*                             pairs of role names. By default, inverted is false.
	*/
    var  inverted:String?

    public required init()
    {
        super.init()
    }
    public override func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.loadWithXml(__node:__node, __request: __request)
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"inverted", url:"")
        {
            self.inverted = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"inverted", url:"")!.stringValue!
        }
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        let __nameItemElement=__request.writeElement(obj: name, type:EPA_FdV_AUTHZ_CV.self, name:"name", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __nameItemElement != nil
        {
            self.name!.serialize(__parent: __nameItemElement!, __request: __request);
        }
            
        let __valueItemElement=__request.writeElement(obj: value, type:EPA_FdV_AUTHZ_CD.self, name:"value", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __valueItemElement != nil
        {
            self.value!.serialize(__parent: __valueItemElement!, __request: __request);
        }
            
        if self.inverted != nil
        {
            let __invertedItemElement=__request.addAttribute(name: "inverted", URI:"", stringValue:"", element:__parent)
            __invertedItemElement.stringValue = self.inverted!;
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="name"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "name")
            {
                self.name = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_CV.self) as? EPA_FdV_AUTHZ_CV
            }
            return true;
        }
        if __node.localName=="value"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "value")
            {
                self.value = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_CD.self) as? EPA_FdV_AUTHZ_CD
            }
            return true;
        }
        if __node.localName=="inverted"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "inverted")
            {
                self.inverted = __node.stringValue!
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}