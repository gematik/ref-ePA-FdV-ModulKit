//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_PutNotificationInfo : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  RecordIdentifier:EPA_FdV_AUTHZ_RecordIdentifierType=EPA_FdV_AUTHZ_RecordIdentifierType()

    var  DeviceID:EPA_FdV_AUTHZ_DeviceIdType=EPA_FdV_AUTHZ_DeviceIdType()

    var  NewNotificationInfo:String=""

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __RecordIdentifierItemElement=__request.writeElement(obj: RecordIdentifier, type:EPA_FdV_AUTHZ_RecordIdentifierType.self, name:"RecordIdentifier", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:false)
        if __RecordIdentifierItemElement != nil
        {
            self.RecordIdentifier.serialize(__parent: __RecordIdentifierItemElement!, __request: __request);
        }
            
        let __DeviceIDItemElement=__request.writeElement(obj: DeviceID, type:EPA_FdV_AUTHZ_DeviceIdType.self, name:"DeviceID", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:false)
        if __DeviceIDItemElement != nil
        {
            self.DeviceID.serialize(__parent: __DeviceIDItemElement!, __request: __request);
        }
            
        let __NewNotificationInfoItemElement=__request.writeElement(obj: NewNotificationInfo, type:String.self, name:"NewNotificationInfo", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:false)
        if __NewNotificationInfoItemElement != nil
        {
            __NewNotificationInfoItemElement!.stringValue = self.NewNotificationInfo;
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="RecordIdentifier"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "RecordIdentifier")
            {
                self.RecordIdentifier = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_RecordIdentifierType.self) as! EPA_FdV_AUTHZ_RecordIdentifierType
            }
            return true;
        }
        if __node.localName=="DeviceID"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "DeviceID")
            {
                self.DeviceID = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_DeviceIdType.self) as! EPA_FdV_AUTHZ_DeviceIdType
            }
            return true;
        }
        if __node.localName=="NewNotificationInfo"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "NewNotificationInfo")
            {
                self.NewNotificationInfo = __node.stringValue!
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}