//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

/**
* Data that is primarily intended for human interpretation
*                 or for further machine processing is outside the scope of
*                 HL7. This includes unformatted or formatted written language,
*                 multimedia data, or structured information as defined by a
*                 different standard (e.g., XML-signatures.)  Instead of the
*                 data itself, an ED may contain
*                 only a reference (see TEL.) Note
*                 that the ST data type is a
*                 specialization of
*                 when the  is text/plain.
*/

public class EPA_FdV_AUTHZ_ED : EPA_FdV_AUTHZ_BIN 
{
    

	/**
	* A telecommunication address (TEL), such as a URL
	*                                 for HTTP or FTP, which will resolve to precisely
	*                                 the same binary data that could as well have been
	*                                 provided as inline data.
	*/
    var  reference:EPA_FdV_AUTHZ_TEL?

    var  thumbnail:EPA_FdV_AUTHZ_thumbnail?

	/**
	* Identifies the type of the encapsulated data and
	*                             identifies a method to interpret or render the data.
	*/
    var  mediaType:String?

	/**
	* For character based information the language property
	*                             specifies the human language of the text.
	*/
    var  language:String?

	/**
	* Indicates whether the raw byte data is compressed,
	*                             and what compression algorithm was used.
	*/
    var  compression:EPA_FdV_AUTHZ_CompressionAlgorithm?

	/**
	* The integrity check is a short binary value representing
	*                             a cryptographically strong checksum that is calculated
	*                             over the binary data. The purpose of this property, when
	*                             communicated with a reference is for anyone to validate
	*                             later whether the reference still resolved to the same
	*                             data that the reference resolved to when the encapsulated
	*                             data value with reference was created.
	*/
    var  integrityCheck:Data?=Data()

	/**
	* Specifies the algorithm used to compute the
	*                             integrityCheck value.
	*/
    var  integrityCheckAlgorithm:EPA_FdV_AUTHZ_IntegrityCheckAlgorithm?

    public required init()
    {
        super.init()
    }
    public override func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.loadWithXml(__node:__node, __request: __request)
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"mediaType", url:"")
        {
            self.mediaType = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"mediaType", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"language", url:"")
        {
            self.language = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"language", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"compression", url:"")
        {
            self.compression = EPA_FdV_AUTHZ_CompressionAlgorithm.createWithXml(node: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"compression", url:"")!)!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"integrityCheck", url:"")
        {
            self.integrityCheck = __request.getBinary(element: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"integrityCheck", url:"")!,isSwaRef:false, isAttribute:true)
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"integrityCheckAlgorithm", url:"")
        {
            self.integrityCheckAlgorithm = EPA_FdV_AUTHZ_IntegrityCheckAlgorithm.createWithXml(node: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"integrityCheckAlgorithm", url:"")!)!
        }
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        let __referenceItemElement=__request.writeElement(obj: reference, type:EPA_FdV_AUTHZ_TEL.self, name:"reference", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __referenceItemElement != nil
        {
            self.reference!.serialize(__parent: __referenceItemElement!, __request: __request);
        }
            
        let __thumbnailItemElement=__request.writeElement(obj: thumbnail, type:EPA_FdV_AUTHZ_thumbnail.self, name:"thumbnail", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __thumbnailItemElement != nil
        {
            self.thumbnail!.serialize(__parent: __thumbnailItemElement!, __request: __request);
        }
            
        if self.mediaType != nil
        {
            let __mediaTypeItemElement=__request.addAttribute(name: "mediaType", URI:"", stringValue:"", element:__parent)
            __mediaTypeItemElement.stringValue = self.mediaType!;
        }
            
        if self.language != nil
        {
            let __languageItemElement=__request.addAttribute(name: "language", URI:"", stringValue:"", element:__parent)
            __languageItemElement.stringValue = self.language!;
        }
            
        if self.compression != nil
        {
            let __compressionItemElement=__request.addAttribute(name: "compression", URI:"", stringValue:"", element:__parent)
            self.compression!.serialize(__parent: __compressionItemElement);
        }
            
        if self.integrityCheck != nil
        {
            let __integrityCheckItemElement=__request.addAttribute(name: "integrityCheck", URI:"", stringValue:"", element:__parent)
            __request.setBinary(propertyElement: __integrityCheckItemElement, data:self.integrityCheck!, isSwaRef:false, isAttribute:true);
        }
            
        if self.integrityCheckAlgorithm != nil
        {
            let __integrityCheckAlgorithmItemElement=__request.addAttribute(name: "integrityCheckAlgorithm", URI:"", stringValue:"", element:__parent)
            self.integrityCheckAlgorithm!.serialize(__parent: __integrityCheckAlgorithmItemElement);
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="reference"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "reference")
            {
                self.reference = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_TEL.self) as? EPA_FdV_AUTHZ_TEL
            }
            return true;
        }
        if __node.localName=="thumbnail"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "thumbnail")
            {
                self.thumbnail = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_thumbnail.self) as? EPA_FdV_AUTHZ_thumbnail
            }
            return true;
        }
        if __node.localName=="mediaType"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "mediaType")
            {
                self.mediaType = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="language"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "language")
            {
                self.language = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="compression"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "compression")
            {
                self.compression = EPA_FdV_AUTHZ_CompressionAlgorithm.createWithXml(node: __node)!
            }
            return true;
        }
        if __node.localName=="integrityCheck"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "integrityCheck")
            {
                self.integrityCheck = __request.getBinary(element: __node,isSwaRef:false, isAttribute:true)
            }
            return true;
        }
        if __node.localName=="integrityCheckAlgorithm"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "integrityCheckAlgorithm")
            {
                self.integrityCheckAlgorithm = EPA_FdV_AUTHZ_IntegrityCheckAlgorithm.createWithXml(node: __node)!
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}