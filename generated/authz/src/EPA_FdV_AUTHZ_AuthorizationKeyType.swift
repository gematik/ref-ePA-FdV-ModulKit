//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_AuthorizationKeyType : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  EncryptedKeyContainer:EPA_FdV_AUTHZ_EncryptedKeyContainerType=EPA_FdV_AUTHZ_EncryptedKeyContainerType()

    var  AuthorizationType:EPA_FdV_AUTHZ_AuthorizationTypeType=EPA_FdV_AUTHZ_AuthorizationTypeType.DOCUMENT_AUTHORIZATION

    var  validTo:Date=Date()

    var  actorID:String=""

    var  DisplayName:String?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"validTo", url:"")
        {
            self.validTo = EPA_FdV_AUTHZ_Helper.getDate(stringDate: EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"validTo", url:"")!.stringValue)!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"actorID", url:"")
        {
            self.actorID = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"actorID", url:"")!.stringValue!
        }
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"DisplayName", url:"")
        {
            self.DisplayName = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"DisplayName", url:"")!.stringValue!
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __EncryptedKeyContainerItemElement=__request.writeElement(obj: EncryptedKeyContainer, type:EPA_FdV_AUTHZ_EncryptedKeyContainerType.self, name:"EncryptedKeyContainer", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:false)
        if __EncryptedKeyContainerItemElement != nil
        {
            self.EncryptedKeyContainer.serialize(__parent: __EncryptedKeyContainerItemElement!, __request: __request);
        }
            
        let __AuthorizationTypeItemElement=__request.writeElement(obj: AuthorizationType, type:EPA_FdV_AUTHZ_AuthorizationTypeType.self, name:"AuthorizationType", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:false)
        if __AuthorizationTypeItemElement != nil
        {
            self.AuthorizationType.serialize(__parent: __AuthorizationTypeItemElement!);
        }
            
        let __validToItemElement=__request.addAttribute(name: "validTo", URI:"", stringValue:"", element:__parent)
        __validToItemElement.stringValue = EPA_FdV_AUTHZ_Helper.getStringFromDate(date: self.validTo);    
            
        let __actorIDItemElement=__request.addAttribute(name: "actorID", URI:"", stringValue:"", element:__parent)
        __actorIDItemElement.stringValue = self.actorID;    
            
        if self.DisplayName != nil
        {
            let __DisplayNameItemElement=__request.addAttribute(name: "DisplayName", URI:"", stringValue:"", element:__parent)
            __DisplayNameItemElement.stringValue = self.DisplayName!;
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="EncryptedKeyContainer"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "EncryptedKeyContainer")
            {
                self.EncryptedKeyContainer = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_EncryptedKeyContainerType.self) as! EPA_FdV_AUTHZ_EncryptedKeyContainerType
            }
            return true;
        }
        if __node.localName=="AuthorizationType"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "AuthorizationType")
            {
                self.AuthorizationType = EPA_FdV_AUTHZ_AuthorizationTypeType.createWithXml(node: __node)!
            }
            return true;
        }
        if __node.localName=="validTo"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "validTo")
            {
                self.validTo = EPA_FdV_AUTHZ_Helper.getDate(stringDate: __node.stringValue)!
            }
            return true;
        }
        if __node.localName=="actorID"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "actorID")
            {
                self.actorID = __node.stringValue!
            }
            return true;
        }
        if __node.localName=="DisplayName"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "DisplayName")
            {
                self.DisplayName = __node.stringValue!
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}