//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHZ_RecordStateType : NSObject ,EPA_FdV_AUTHZ_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

	/**
	* Es existiert kein Konto für eine angefragte KVNR
	*/
    var  UNKNOWN:NSObject?

	/**
	* Es wurde ein Konto für diese KVNR registriert aber nicht aktiviert
	*/
    var  REGISTERED:NSObject?

	/**
	* Es wurde ein Konto für diese KVNR registriert aber nicht aktiviert und der Versicherte möchte vorhandene Daten aus einem anderen Aktenkonto in das neue übernehmen
	*/
    var  REGISTERED_MIGRATION:NSObject?

	/**
	* Es existiert ein aktives Konto zur angefragten KVNR
	*/
    var  ACTIVATED:NSObject?

	/**
	* Ein vorhandenes Konto zu einer KVNR wurde gekündigt, ist jedoch noch in Benutzung
	*/
    var  DISMISSED:NSObject?

	/**
	* Ein vorhandenes Konto zu einer KVNR wurde gekündigt und vorhandene Daten wurden für den Kontoumzug vorbereitet
	*/
    var  SUSPENDED:NSObject?

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        
            
        let __UNKNOWNItemElement=__request.writeElement(obj: UNKNOWN, type:NSObject.self, name:"UNKNOWN", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __UNKNOWNItemElement != nil
        {
            __request.setAnyTypeValue(item: self.UNKNOWN!, propertyElement:__UNKNOWNItemElement!);
        }
            
        let __REGISTEREDItemElement=__request.writeElement(obj: REGISTERED, type:NSObject.self, name:"REGISTERED", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __REGISTEREDItemElement != nil
        {
            __request.setAnyTypeValue(item: self.REGISTERED!, propertyElement:__REGISTEREDItemElement!);
        }
            
        let __REGISTERED_MIGRATIONItemElement=__request.writeElement(obj: REGISTERED_MIGRATION, type:NSObject.self, name:"REGISTERED_MIGRATION", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __REGISTERED_MIGRATIONItemElement != nil
        {
            __request.setAnyTypeValue(item: self.REGISTERED_MIGRATION!, propertyElement:__REGISTERED_MIGRATIONItemElement!);
        }
            
        let __ACTIVATEDItemElement=__request.writeElement(obj: ACTIVATED, type:NSObject.self, name:"ACTIVATED", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __ACTIVATEDItemElement != nil
        {
            __request.setAnyTypeValue(item: self.ACTIVATED!, propertyElement:__ACTIVATEDItemElement!);
        }
            
        let __DISMISSEDItemElement=__request.writeElement(obj: DISMISSED, type:NSObject.self, name:"DISMISSED", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __DISMISSEDItemElement != nil
        {
            __request.setAnyTypeValue(item: self.DISMISSED!, propertyElement:__DISMISSEDItemElement!);
        }
            
        let __SUSPENDEDItemElement=__request.writeElement(obj: SUSPENDED, type:NSObject.self, name:"SUSPENDED", URI:"http://ws.gematik.de/fd/phrs/AuthorizationService/v1.1", parent:__parent, skipNullProperty:true)
        if __SUSPENDEDItemElement != nil
        {
            __request.setAnyTypeValue(item: self.SUSPENDED!, propertyElement:__SUSPENDEDItemElement!);
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="UNKNOWN"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "UNKNOWN")
            {
                self.UNKNOWN = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        if __node.localName=="REGISTERED"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "REGISTERED")
            {
                self.REGISTERED = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        if __node.localName=="REGISTERED_MIGRATION"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "REGISTERED_MIGRATION")
            {
                self.REGISTERED_MIGRATION = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        if __node.localName=="ACTIVATED"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "ACTIVATED")
            {
                self.ACTIVATED = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        if __node.localName=="DISMISSED"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "DISMISSED")
            {
                self.DISMISSED = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        if __node.localName=="SUSPENDED"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "SUSPENDED")
            {
                self.SUSPENDED = __request.getAnyTypeValue(node: __node)
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}