//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

/**
* A name for a person, organization, place or thing. A
*                 sequence of name parts, such as given name or family
*                 name, prefix, suffix, etc. Examples for entity name
*                 values are "Jim Bob Walton, Jr.", "Health Level Seven,
*                 Inc.", "Lake Tahoe", etc. An entity name may be as simple
*                 as a character string or may consist of several entity name
*                 parts, such as, "Jim", "Bob", "Walton", and "Jr.", "Health
*                 Level Seven" and "Inc.", "Lake" and "Tahoe".
*/

public class EPA_FdV_AUTHZ_EN : EPA_FdV_AUTHZ_ANY 
{
    

    var delimiter:[EPA_FdV_AUTHZ_en_x002E_delimiter?]? = []

    var family:[EPA_FdV_AUTHZ_en_x002E_family?]? = []

    var given:[EPA_FdV_AUTHZ_en_x002E_given?]? = []

    var prefix:[EPA_FdV_AUTHZ_en_x002E_prefix?]? = []

    var suffix:[EPA_FdV_AUTHZ_en_x002E_suffix?]? = []

	/**
	* An interval of time specifying the time during which
	*                                 the name is or was used for the entity. This
	*                                 accomodates the fact that people change names for
	*                                 people, places and things.
	*/
    var  validTime:EPA_FdV_AUTHZ_IVL_TS?

	/**
	* A set of codes advising a system or user which name
	*                             in a set of like names to select for a given purpose.
	*                             A name without specific use code might be a default
	*                             name useful for any purpose, but a name with a specific
	*                             use code would be preferred for that respective purpose.
	*/
    var  use:String?

    public required init()
    {
        super.init()
    }
    public override func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.loadWithXml(__node:__node, __request: __request)
        if EPA_FdV_AUTHZ_Helper.hasAttribute(node: __node, name:"use", url:"")
        {
            self.use = EPA_FdV_AUTHZ_Helper.getAttribute(node: __node, name:"use", url:"")!.stringValue!
        }
    }

    public override func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        super.serialize(__parent:__parent, __request:__request)
        
            
        if self.delimiter != nil
        {
            for __item in self.delimiter!
            {
                let __delimiterItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_en_x002E_delimiter.self, name:"delimiter", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
                if __delimiterItemElement != nil
                {
                    __item!.serialize(__parent: __delimiterItemElement!, __request: __request);
                }
            }
        }
            
        if self.family != nil
        {
            for __item in self.family!
            {
                let __familyItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_en_x002E_family.self, name:"family", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
                if __familyItemElement != nil
                {
                    __item!.serialize(__parent: __familyItemElement!, __request: __request);
                }
            }
        }
            
        if self.given != nil
        {
            for __item in self.given!
            {
                let __givenItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_en_x002E_given.self, name:"given", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
                if __givenItemElement != nil
                {
                    __item!.serialize(__parent: __givenItemElement!, __request: __request);
                }
            }
        }
            
        if self.prefix != nil
        {
            for __item in self.prefix!
            {
                let __prefixItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_en_x002E_prefix.self, name:"prefix", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
                if __prefixItemElement != nil
                {
                    __item!.serialize(__parent: __prefixItemElement!, __request: __request);
                }
            }
        }
            
        if self.suffix != nil
        {
            for __item in self.suffix!
            {
                let __suffixItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHZ_en_x002E_suffix.self, name:"suffix", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:false)
                if __suffixItemElement != nil
                {
                    __item!.serialize(__parent: __suffixItemElement!, __request: __request);
                }
            }
        }
            
        let __validTimeItemElement=__request.writeElement(obj: validTime, type:EPA_FdV_AUTHZ_IVL_TS.self, name:"validTime", URI:"urn:hl7-org:v3", parent:__parent, skipNullProperty:true)
        if __validTimeItemElement != nil
        {
            self.validTime!.serialize(__parent: __validTimeItemElement!, __request: __request);
        }
            
        if self.use != nil
        {
            let __useItemElement=__request.addAttribute(name: "use", URI:"", stringValue:"", element:__parent)
            __useItemElement.stringValue = self.use!;
        }

    }

    public override  func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHZ_RequestResultHandler ) -> Bool
    {
        if __node.localName=="delimiter"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "delimiter")
            {
                if self.delimiter == nil
                {
                    self.delimiter = []
                }
                self.delimiter!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_en_x002E_delimiter.self) as? EPA_FdV_AUTHZ_en_x002E_delimiter)
            }
            return true;
        }
        if __node.localName=="family"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "family")
            {
                if self.family == nil
                {
                    self.family = []
                }
                self.family!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_en_x002E_family.self) as? EPA_FdV_AUTHZ_en_x002E_family)
            }
            return true;
        }
        if __node.localName=="given"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "given")
            {
                if self.given == nil
                {
                    self.given = []
                }
                self.given!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_en_x002E_given.self) as? EPA_FdV_AUTHZ_en_x002E_given)
            }
            return true;
        }
        if __node.localName=="prefix"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "prefix")
            {
                if self.prefix == nil
                {
                    self.prefix = []
                }
                self.prefix!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_en_x002E_prefix.self) as? EPA_FdV_AUTHZ_en_x002E_prefix)
            }
            return true;
        }
        if __node.localName=="suffix"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "suffix")
            {
                if self.suffix == nil
                {
                    self.suffix = []
                }
                self.suffix!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_en_x002E_suffix.self) as? EPA_FdV_AUTHZ_en_x002E_suffix)
            }
            return true;
        }
        if __node.localName=="validTime"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "validTime")
            {
                self.validTime = try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_IVL_TS.self) as? EPA_FdV_AUTHZ_IVL_TS
            }
            return true;
        }
        if __node.localName=="use"
        {
            if EPA_FdV_AUTHZ_Helper.isValue(node:__node, name: "use")
            {
                self.use = __node.stringValue!
            }
            return true;
        }
        return super.loadProperty(__node:__node, __request:__request)
    }
}