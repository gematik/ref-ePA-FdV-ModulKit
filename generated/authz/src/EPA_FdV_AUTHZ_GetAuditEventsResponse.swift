//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------


import Foundation

open class EPA_FdV_AUTHZ_GetAuditEventsResponse : NSObject,EPA_FdV_AUTHZ_ISerializableObject
{
    private var contents:[EPA_FdV_AUTHZ_AuditMessage?]=[]
    private var  __source:DDXMLNode? = nil

    public var count: Int {
        return contents.count
    }

    open override var description: String {
        return contents.description
    }

    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public func loadProperty( __node:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler) -> Bool
    {
        if __node.localName == "AuditMessage"
        {
            self.contents.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHZ_AuditMessage.self) as? EPA_FdV_AUTHZ_AuditMessage)
            return true
        }
        return false
    }

    public required override init()
    {
        super.init()
    }

    public init(values: EPA_FdV_AUTHZ_AuditMessage?...) {
        contents = values
    }

    public func indexOf(predicate: (EPA_FdV_AUTHZ_AuditMessage?) -> Bool) ->  Int?
    {
        return contents.firstIndex(where:predicate)
    }

    public func contains(predicate: (EPA_FdV_AUTHZ_AuditMessage?) -> Bool) -> Bool {
        return contents.contains(where: predicate)
    }

    public func indexOf(value: EPA_FdV_AUTHZ_AuditMessage?) -> Int? {
        return contents.firstIndex { (x) -> Bool in
            return x == value
        }
    }

    public func insert(value: EPA_FdV_AUTHZ_AuditMessage?, index:Int) {
        contents.insert(value, at:index)
    }

    public func append(value: EPA_FdV_AUTHZ_AuditMessage?) {
        contents.append(value)
    }

    public func remove(value: EPA_FdV_AUTHZ_AuditMessage?) -> EPA_FdV_AUTHZ_AuditMessage? {
        if let index = indexOf(value: value) {
            return contents.remove(at: index)
        }
        return nil
    }

    public func removeAtIndex(index: Int) -> EPA_FdV_AUTHZ_AuditMessage? {
        return contents.remove(at: index)
    }

    public func removeAll(keepCapacity: Bool = true) {
        contents.removeAll(keepingCapacity: keepCapacity)
    }

    public subscript(i: Int) -> EPA_FdV_AUTHZ_AuditMessage?
    {
        get{
            return contents[i]
        }
        set(newValue){
            contents[i]=newValue
        }
    }

    public func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHZ_RequestResultHandler)
    {
        for item in self.contents
        {
            let propertyElement=__request.writeElement(obj: item, type:EPA_FdV_AUTHZ_AuditMessage.self, name:"AuditMessage", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
            if propertyElement != nil
            {
                item!.serialize(__parent: propertyElement!, __request: __request);
            }
        }
    }
    
    public func getOriginalXmlSource() -> DDXMLNode?
    {
        return __source
    }
}

extension EPA_FdV_AUTHZ_GetAuditEventsResponse : Sequence {
    public typealias Iterator =  AnyIterator< EPA_FdV_AUTHZ_AuditMessage?>

    public func makeIterator() -> Iterator {
        var iterator = contents.makeIterator()
        return AnyIterator{
            return iterator.next()
        }
    }
    
    public func index(after i: Index) -> Index {
        return Index(contents.index(after: i))
    }
}

extension EPA_FdV_AUTHZ_GetAuditEventsResponse : Collection
{
    public typealias Index = Int

    public var startIndex: Int {
        return 0
    }

    public var endIndex: Int {
        return count
    }
}
