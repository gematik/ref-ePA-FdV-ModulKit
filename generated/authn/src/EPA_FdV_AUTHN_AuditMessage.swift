//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHN_AuditMessage : NSObject ,EPA_FdV_AUTHN_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  EventIdentification:EPA_FdV_AUTHN_EventIdentificationType=EPA_FdV_AUTHN_EventIdentificationType()

    var ActiveParticipant:[EPA_FdV_AUTHN_AuditMessage_ActiveParticipant?]? = []

    var AuditSourceIdentification:[EPA_FdV_AUTHN_AuditSourceIdentificationType?]? = []

    var ParticipantObjectIdentification:[EPA_FdV_AUTHN_ParticipantObjectIdentificationType?]? = []

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHN_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHN_RequestResultHandler)
    {
        
            
        let __EventIdentificationItemElement=__request.writeElement(obj: EventIdentification, type:EPA_FdV_AUTHN_EventIdentificationType.self, name:"EventIdentification", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
        if __EventIdentificationItemElement != nil
        {
            self.EventIdentification.serialize(__parent: __EventIdentificationItemElement!, __request: __request);
        }
            
        if self.ActiveParticipant != nil
        {
            for __item in self.ActiveParticipant!
            {
                let __ActiveParticipantItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHN_AuditMessage_ActiveParticipant.self, name:"ActiveParticipant", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
                if __ActiveParticipantItemElement != nil
                {
                    __item!.serialize(__parent: __ActiveParticipantItemElement!, __request: __request);
                }
            }
        }
            
        if self.AuditSourceIdentification != nil
        {
            for __item in self.AuditSourceIdentification!
            {
                let __AuditSourceIdentificationItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHN_AuditSourceIdentificationType.self, name:"AuditSourceIdentification", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
                if __AuditSourceIdentificationItemElement != nil
                {
                    __item!.serialize(__parent: __AuditSourceIdentificationItemElement!, __request: __request);
                }
            }
        }
            
        if self.ParticipantObjectIdentification != nil
        {
            for __item in self.ParticipantObjectIdentification!
            {
                let __ParticipantObjectIdentificationItemElement=__request.writeElement(obj: __item, type:EPA_FdV_AUTHN_ParticipantObjectIdentificationType.self, name:"ParticipantObjectIdentification", URI:"http://ws.gematik.de/fa/phrext/v1.0", parent:__parent, skipNullProperty:false)
                if __ParticipantObjectIdentificationItemElement != nil
                {
                    __item!.serialize(__parent: __ParticipantObjectIdentificationItemElement!, __request: __request);
                }
            }
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHN_RequestResultHandler ) -> Bool
    {
        if __node.localName=="EventIdentification"
        {
            if EPA_FdV_AUTHN_Helper.isValue(node:__node, name: "EventIdentification")
            {
                self.EventIdentification = try! __request.createObject(node: __node, type:EPA_FdV_AUTHN_EventIdentificationType.self) as! EPA_FdV_AUTHN_EventIdentificationType
            }
            return true;
        }
        if __node.localName=="ActiveParticipant"
        {
            if EPA_FdV_AUTHN_Helper.isValue(node:__node, name: "ActiveParticipant")
            {
                if self.ActiveParticipant == nil
                {
                    self.ActiveParticipant = []
                }
                self.ActiveParticipant!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHN_AuditMessage_ActiveParticipant.self) as? EPA_FdV_AUTHN_AuditMessage_ActiveParticipant)
            }
            return true;
        }
        if __node.localName=="AuditSourceIdentification"
        {
            if EPA_FdV_AUTHN_Helper.isValue(node:__node, name: "AuditSourceIdentification")
            {
                if self.AuditSourceIdentification == nil
                {
                    self.AuditSourceIdentification = []
                }
                self.AuditSourceIdentification!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHN_AuditSourceIdentificationType.self) as? EPA_FdV_AUTHN_AuditSourceIdentificationType)
            }
            return true;
        }
        if __node.localName=="ParticipantObjectIdentification"
        {
            if EPA_FdV_AUTHN_Helper.isValue(node:__node, name: "ParticipantObjectIdentification")
            {
                if self.ParticipantObjectIdentification == nil
                {
                    self.ParticipantObjectIdentification = []
                }
                self.ParticipantObjectIdentification!.append(try! __request.createObject(node: __node, type:EPA_FdV_AUTHN_ParticipantObjectIdentificationType.self) as? EPA_FdV_AUTHN_ParticipantObjectIdentificationType)
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}