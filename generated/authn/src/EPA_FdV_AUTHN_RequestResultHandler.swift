//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation

public protocol EPA_FdV_AUTHN_ISerializableObject:NSObjectProtocol {
    func loadWithXml(__node:DDXMLElement,__request:EPA_FdV_AUTHN_RequestResultHandler)
    func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHN_RequestResultHandler)
    init()
}
public protocol EPA_FdV_AUTHN_IReferenceObject {
    
}
@objc public protocol EPA_FdV_AUTHN_SoapServiceResponse
{
    func onSuccess( value:AnyObject?, methodName:String)
    func onError(error:Error)
}

open class EPA_FdV_AUTHN_RequestResultHandler
{
    static let SOAPVERSION_10:Int = 1
    static let SOAPVERSION_11:Int = 2
    static let SOAPVERSION_12:Int = 3
    
    var namespaces:[NSObject:String]?
    static var classNames:NSDictionary?
    var CreateClassesForAny:Bool = false
    static var elementNames:NSDictionary?
    private var soapVersion:Int
    private var xml:DDXMLDocument?
    var Header:DDXMLElement?
    var Body:DDXMLElement?
    var OutputHeader:DDXMLElement?
    var OutputBody:DDXMLElement?
    var OutputFault:Error?
    var referencesTable=[String:NSObject]()
    var reverseReferencesTable=[NSObject:String]()
    var EnableLogging:Bool=false
    private var envNS:String
    private var networkTask:URLSessionDataTask?

    init(version:Int)
    {
        soapVersion=version
        envNS=soapVersion==EPA_FdV_AUTHN_RequestResultHandler.SOAPVERSION_12 ? "http://www.w3.org/2003/05/soap-envelope" : "http://schemas.xmlsoap.org/soap/envelope/"
        namespaces=[NSObject:String]()
        try! createEnvelopeXml()
        if EPA_FdV_AUTHN_RequestResultHandler.classNames  == nil
        {
            EPA_FdV_AUTHN_RequestResultHandler.classNames=[
                    "http://www.w3.org/2000/09/xmldsig#^^SignatureType":EPA_FdV_AUTHN_SignatureType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^SignedInfoType":EPA_FdV_AUTHN_SignedInfoType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^CanonicalizationMethodType":EPA_FdV_AUTHN_CanonicalizationMethodType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^SignatureMethodType":EPA_FdV_AUTHN_SignatureMethodType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^ReferenceType":EPA_FdV_AUTHN_ReferenceType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^TransformType":EPA_FdV_AUTHN_TransformType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^DigestMethodType":EPA_FdV_AUTHN_DigestMethodType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^KeyInfoType":EPA_FdV_AUTHN_KeyInfoType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^KeyValueType":EPA_FdV_AUTHN_KeyValueType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^RetrievalMethodType":EPA_FdV_AUTHN_RetrievalMethodType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^X509DataType":EPA_FdV_AUTHN_X509DataType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^X509IssuerSerialType":EPA_FdV_AUTHN_X509IssuerSerialType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^PGPDataType":EPA_FdV_AUTHN_PGPDataType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^SPKIDataType":EPA_FdV_AUTHN_SPKIDataType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^ObjectType":EPA_FdV_AUTHN_ObjectType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^ManifestType":EPA_FdV_AUTHN_ManifestType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^SignaturePropertiesType":EPA_FdV_AUTHN_SignaturePropertiesType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^SignaturePropertyType":EPA_FdV_AUTHN_SignaturePropertyType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^DSAKeyValueType":EPA_FdV_AUTHN_DSAKeyValueType.self,
                    "http://www.w3.org/2000/09/xmldsig#^^RSAKeyValueType":EPA_FdV_AUTHN_RSAKeyValueType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptedType":EPA_FdV_AUTHN_EncryptedType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptionMethodType":EPA_FdV_AUTHN_EncryptionMethodType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^CipherDataType":EPA_FdV_AUTHN_CipherDataType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^CipherReferenceType":EPA_FdV_AUTHN_CipherReferenceType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptedDataType":EPA_FdV_AUTHN_EncryptedDataType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptedKeyType":EPA_FdV_AUTHN_EncryptedKeyType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^AgreementMethodType":EPA_FdV_AUTHN_AgreementMethodType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^ReferenceType":EPA_FdV_AUTHN_ReferenceType_1.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptionPropertiesType":EPA_FdV_AUTHN_EncryptionPropertiesType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^EncryptionPropertyType":EPA_FdV_AUTHN_EncryptionPropertyType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^DHKeyValueType":EPA_FdV_AUTHN_DHKeyValueType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^ReferenceList":EPA_FdV_AUTHN_ReferenceList.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^BaseIDAbstractType":EPA_FdV_AUTHN_BaseIDAbstractType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedElementType":EPA_FdV_AUTHN_EncryptedElementType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AssertionType":EPA_FdV_AUTHN_AssertionType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectType":EPA_FdV_AUTHN_SubjectType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmationType":EPA_FdV_AUTHN_SubjectConfirmationType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmationDataType":EPA_FdV_AUTHN_SubjectConfirmationDataType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^KeyInfoConfirmationDataType":EPA_FdV_AUTHN_KeyInfoConfirmationDataType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^ConditionsType":EPA_FdV_AUTHN_ConditionsType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^ConditionAbstractType":EPA_FdV_AUTHN_ConditionAbstractType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AudienceRestrictionType":EPA_FdV_AUTHN_AudienceRestrictionType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^OneTimeUseType":EPA_FdV_AUTHN_OneTimeUseType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^ProxyRestrictionType":EPA_FdV_AUTHN_ProxyRestrictionType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AdviceType":EPA_FdV_AUTHN_AdviceType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^StatementAbstractType":EPA_FdV_AUTHN_StatementAbstractType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AuthnStatementType":EPA_FdV_AUTHN_AuthnStatementType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectLocalityType":EPA_FdV_AUTHN_SubjectLocalityType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AuthnContextType":EPA_FdV_AUTHN_AuthnContextType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AuthzDecisionStatementType":EPA_FdV_AUTHN_AuthzDecisionStatementType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^EvidenceType":EPA_FdV_AUTHN_EvidenceType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AttributeStatementType":EPA_FdV_AUTHN_AttributeStatementType.self,
                    "urn:oasis:names:tc:SAML:2.0:assertion^^AttributeType":EPA_FdV_AUTHN_AttributeType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^EventIdentificationType":EPA_FdV_AUTHN_EventIdentificationType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^AuditSourceIdentificationType":EPA_FdV_AUTHN_AuditSourceIdentificationType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^ActiveParticipantType":EPA_FdV_AUTHN_ActiveParticipantType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^ParticipantObjectIdentificationType":EPA_FdV_AUTHN_ParticipantObjectIdentificationType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^CodedValueType":EPA_FdV_AUTHN_CodedValueType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^TypeValuePairType":EPA_FdV_AUTHN_TypeValuePairType.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^AuditMessage_ActiveParticipant":EPA_FdV_AUTHN_AuditMessage_ActiveParticipant.self,
                    "http://ws.gematik.de/fa/phrext/v1.0^^AuditMessage":EPA_FdV_AUTHN_AuditMessage.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^TimestampType":EPA_FdV_AUTHN_TimestampType.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^UsernameTokenType":EPA_FdV_AUTHN_UsernameTokenType.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^ReferenceType":EPA_FdV_AUTHN_ReferenceType_2.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^EmbeddedType":EPA_FdV_AUTHN_EmbeddedType.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^SecurityTokenReferenceType":EPA_FdV_AUTHN_SecurityTokenReferenceType.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^SecurityHeaderType":EPA_FdV_AUTHN_SecurityHeaderType.self,
                    "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^TransformationParametersType":EPA_FdV_AUTHN_TransformationParametersType.self,
                    "http://schemas.xmlsoap.org/ws/2004/09/policy^^OperatorContentType":EPA_FdV_AUTHN_OperatorContentType.self,
                    "http://schemas.xmlsoap.org/ws/2004/09/policy^^Policy":EPA_FdV_AUTHN_Policy.self,
                    "http://schemas.xmlsoap.org/ws/2004/09/policy^^PolicyReference":EPA_FdV_AUTHN_PolicyReference.self,
                    "http://schemas.xmlsoap.org/ws/2004/09/policy^^PolicyAttachment":EPA_FdV_AUTHN_PolicyAttachment.self,
                    "http://schemas.xmlsoap.org/ws/2004/09/policy^^AppliesTo":EPA_FdV_AUTHN_AppliesTo.self,
                    "http://www.w3.org/2005/08/addressing^^EndpointReferenceType":EPA_FdV_AUTHN_EndpointReferenceType.self,
                    "http://www.w3.org/2005/08/addressing^^ReferenceParametersType":EPA_FdV_AUTHN_ReferenceParametersType.self,
                    "http://www.w3.org/2005/08/addressing^^MetadataType":EPA_FdV_AUTHN_MetadataType.self,
                    "http://www.w3.org/2005/08/addressing^^AttributedAnyType":EPA_FdV_AUTHN_AttributedAnyType.self,
                    "http://www.w3.org/2005/08/addressing^^ProblemActionType":EPA_FdV_AUTHN_ProblemActionType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenType":EPA_FdV_AUTHN_RequestSecurityTokenType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseType":EPA_FdV_AUTHN_RequestSecurityTokenResponseType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedSecurityTokenType":EPA_FdV_AUTHN_RequestedSecurityTokenType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ClaimsType":EPA_FdV_AUTHN_ClaimsType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^EntropyType":EPA_FdV_AUTHN_EntropyType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^LifetimeType":EPA_FdV_AUTHN_LifetimeType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedReferenceType":EPA_FdV_AUTHN_RequestedReferenceType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedProofTokenType":EPA_FdV_AUTHN_RequestedProofTokenType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RenewTargetType":EPA_FdV_AUTHN_RenewTargetType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^AllowPostdatingType":EPA_FdV_AUTHN_AllowPostdatingType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RenewingType":EPA_FdV_AUTHN_RenewingType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^CancelTargetType":EPA_FdV_AUTHN_CancelTargetType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedTokenCancelledType":EPA_FdV_AUTHN_RequestedTokenCancelledType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ValidateTargetType":EPA_FdV_AUTHN_ValidateTargetType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^StatusType":EPA_FdV_AUTHN_StatusType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SignChallengeType":EPA_FdV_AUTHN_SignChallengeType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestKETType":EPA_FdV_AUTHN_RequestKETType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^KeyExchangeTokenType":EPA_FdV_AUTHN_KeyExchangeTokenType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^AuthenticatorType":EPA_FdV_AUTHN_AuthenticatorType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^OnBehalfOfType":EPA_FdV_AUTHN_OnBehalfOfType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^EncryptionType":EPA_FdV_AUTHN_EncryptionType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ProofEncryptionType":EPA_FdV_AUTHN_ProofEncryptionType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^UseKeyType":EPA_FdV_AUTHN_UseKeyType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^DelegateToType":EPA_FdV_AUTHN_DelegateToType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ParticipantsType":EPA_FdV_AUTHN_ParticipantsType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ParticipantType":EPA_FdV_AUTHN_ParticipantType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SecondaryParameters":EPA_FdV_AUTHN_SecondaryParameters.self,
                    "http://ws.gematik.de/tel/error/v2.0^^Error_Trace":EPA_FdV_AUTHN_Error_Trace.self,
                    "http://ws.gematik.de/tel/error/v2.0^^Error":EPA_FdV_AUTHN_Error.self,
                    "http://ws.gematik.de/fd/phrs/I_Authentication_Insurant/v1.1^^GetAuditEventsResponse":EPA_FdV_AUTHN_GetAuditEventsResponse.self,
                    "http://www.w3.org/2006/05/addressing/wsdl^^UsingAddressing":EPA_FdV_AUTHN_UsingAddressing.self,
                    "http://www.w3.org/2000/09/xmldsig#^^TransformsType":EPA_FdV_AUTHN_TransformsType.self,
                    "http://www.w3.org/2001/04/xmlenc#^^TransformsType":EPA_FdV_AUTHN_TransformsType_1.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenCollectionType":EPA_FdV_AUTHN_RequestSecurityTokenCollectionType.self,
                    "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseCollectionType":EPA_FdV_AUTHN_RequestSecurityTokenResponseCollectionType.self,
            ]
                 EPA_FdV_AUTHN_RequestResultHandler.elementNames=[
                 "http://www.w3.org/2000/09/xmldsig#^^Signature":"http://www.w3.org/2000/09/xmldsig#^^SignatureType",
                 "http://www.w3.org/2000/09/xmldsig#^^SignatureValue":"http://www.w3.org/2000/09/xmldsig#^^SignatureValueType",
                 "http://www.w3.org/2000/09/xmldsig#^^SignedInfo":"http://www.w3.org/2000/09/xmldsig#^^SignedInfoType",
                 "http://www.w3.org/2000/09/xmldsig#^^CanonicalizationMethod":"http://www.w3.org/2000/09/xmldsig#^^CanonicalizationMethodType",
                 "http://www.w3.org/2000/09/xmldsig#^^SignatureMethod":"http://www.w3.org/2000/09/xmldsig#^^SignatureMethodType",
                 "http://www.w3.org/2000/09/xmldsig#^^Reference":"http://www.w3.org/2000/09/xmldsig#^^ReferenceType",
                 "http://www.w3.org/2000/09/xmldsig#^^Transforms":"http://www.w3.org/2000/09/xmldsig#^^TransformsType",
                 "http://www.w3.org/2000/09/xmldsig#^^Transform":"http://www.w3.org/2000/09/xmldsig#^^TransformType",
                 "http://www.w3.org/2000/09/xmldsig#^^DigestMethod":"http://www.w3.org/2000/09/xmldsig#^^DigestMethodType",
                 "http://www.w3.org/2000/09/xmldsig#^^KeyInfo":"http://www.w3.org/2000/09/xmldsig#^^KeyInfoType",
                 "http://www.w3.org/2000/09/xmldsig#^^KeyValue":"http://www.w3.org/2000/09/xmldsig#^^KeyValueType",
                 "http://www.w3.org/2000/09/xmldsig#^^RetrievalMethod":"http://www.w3.org/2000/09/xmldsig#^^RetrievalMethodType",
                 "http://www.w3.org/2000/09/xmldsig#^^X509Data":"http://www.w3.org/2000/09/xmldsig#^^X509DataType",
                 "http://www.w3.org/2000/09/xmldsig#^^PGPData":"http://www.w3.org/2000/09/xmldsig#^^PGPDataType",
                 "http://www.w3.org/2000/09/xmldsig#^^SPKIData":"http://www.w3.org/2000/09/xmldsig#^^SPKIDataType",
                 "http://www.w3.org/2000/09/xmldsig#^^Object":"http://www.w3.org/2000/09/xmldsig#^^ObjectType",
                 "http://www.w3.org/2000/09/xmldsig#^^Manifest":"http://www.w3.org/2000/09/xmldsig#^^ManifestType",
                 "http://www.w3.org/2000/09/xmldsig#^^SignatureProperties":"http://www.w3.org/2000/09/xmldsig#^^SignaturePropertiesType",
                 "http://www.w3.org/2000/09/xmldsig#^^SignatureProperty":"http://www.w3.org/2000/09/xmldsig#^^SignaturePropertyType",
                 "http://www.w3.org/2000/09/xmldsig#^^DSAKeyValue":"http://www.w3.org/2000/09/xmldsig#^^DSAKeyValueType",
                 "http://www.w3.org/2000/09/xmldsig#^^RSAKeyValue":"http://www.w3.org/2000/09/xmldsig#^^RSAKeyValueType",
                 "http://www.w3.org/2001/04/xmlenc#^^CipherData":"http://www.w3.org/2001/04/xmlenc#^^CipherDataType",
                 "http://www.w3.org/2001/04/xmlenc#^^CipherReference":"http://www.w3.org/2001/04/xmlenc#^^CipherReferenceType",
                 "http://www.w3.org/2001/04/xmlenc#^^EncryptedData":"http://www.w3.org/2001/04/xmlenc#^^EncryptedDataType",
                 "http://www.w3.org/2001/04/xmlenc#^^EncryptedKey":"http://www.w3.org/2001/04/xmlenc#^^EncryptedKeyType",
                 "http://www.w3.org/2001/04/xmlenc#^^AgreementMethod":"http://www.w3.org/2001/04/xmlenc#^^AgreementMethodType",
                 "http://www.w3.org/2001/04/xmlenc#^^EncryptionProperties":"http://www.w3.org/2001/04/xmlenc#^^EncryptionPropertiesType",
                 "http://www.w3.org/2001/04/xmlenc#^^EncryptionProperty":"http://www.w3.org/2001/04/xmlenc#^^EncryptionPropertyType",
                 "http://www.w3.org/2001/04/xmlenc#^^DHKeyValue":"http://www.w3.org/2001/04/xmlenc#^^DHKeyValueType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^BaseID":"urn:oasis:names:tc:SAML:2.0:assertion^^BaseIDAbstractType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^NameID":"urn:oasis:names:tc:SAML:2.0:assertion^^NameIDType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedID":"urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedElementType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Issuer":"urn:oasis:names:tc:SAML:2.0:assertion^^NameIDType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Assertion":"urn:oasis:names:tc:SAML:2.0:assertion^^AssertionType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Subject":"urn:oasis:names:tc:SAML:2.0:assertion^^SubjectType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmation":"urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmationType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmationData":"urn:oasis:names:tc:SAML:2.0:assertion^^SubjectConfirmationDataType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Conditions":"urn:oasis:names:tc:SAML:2.0:assertion^^ConditionsType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Condition":"urn:oasis:names:tc:SAML:2.0:assertion^^ConditionAbstractType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^AudienceRestriction":"urn:oasis:names:tc:SAML:2.0:assertion^^AudienceRestrictionType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^OneTimeUse":"urn:oasis:names:tc:SAML:2.0:assertion^^OneTimeUseType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^ProxyRestriction":"urn:oasis:names:tc:SAML:2.0:assertion^^ProxyRestrictionType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Advice":"urn:oasis:names:tc:SAML:2.0:assertion^^AdviceType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedAssertion":"urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedElementType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Statement":"urn:oasis:names:tc:SAML:2.0:assertion^^StatementAbstractType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^AuthnStatement":"urn:oasis:names:tc:SAML:2.0:assertion^^AuthnStatementType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^SubjectLocality":"urn:oasis:names:tc:SAML:2.0:assertion^^SubjectLocalityType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^AuthnContext":"urn:oasis:names:tc:SAML:2.0:assertion^^AuthnContextType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^AuthzDecisionStatement":"urn:oasis:names:tc:SAML:2.0:assertion^^AuthzDecisionStatementType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Action":"urn:oasis:names:tc:SAML:2.0:assertion^^ActionType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Evidence":"urn:oasis:names:tc:SAML:2.0:assertion^^EvidenceType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^AttributeStatement":"urn:oasis:names:tc:SAML:2.0:assertion^^AttributeStatementType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^Attribute":"urn:oasis:names:tc:SAML:2.0:assertion^^AttributeType",
                 "urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedAttribute":"urn:oasis:names:tc:SAML:2.0:assertion^^EncryptedElementType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^Timestamp":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^TimestampType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^Expires":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^AttributedDateTime",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^Created":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd^^AttributedDateTime",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^UsernameToken":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^UsernameTokenType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^BinarySecurityToken":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^BinarySecurityTokenType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^Reference":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^ReferenceType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^Embedded":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^EmbeddedType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^KeyIdentifier":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^KeyIdentifierType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^SecurityTokenReference":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^SecurityTokenReferenceType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^Security":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^SecurityHeaderType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^TransformationParameters":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^TransformationParametersType",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^Password":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^PasswordString",
                 "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^Nonce":"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd^^EncodedString",
                 "http://schemas.xmlsoap.org/ws/2004/09/policy^^All":"http://schemas.xmlsoap.org/ws/2004/09/policy^^OperatorContentType",
                 "http://schemas.xmlsoap.org/ws/2004/09/policy^^ExactlyOne":"http://schemas.xmlsoap.org/ws/2004/09/policy^^OperatorContentType",
                 "http://www.w3.org/2005/08/addressing^^EndpointReference":"http://www.w3.org/2005/08/addressing^^EndpointReferenceType",
                 "http://www.w3.org/2005/08/addressing^^Metadata":"http://www.w3.org/2005/08/addressing^^MetadataType",
                 "http://www.w3.org/2005/08/addressing^^MessageID":"http://www.w3.org/2005/08/addressing^^AttributedURIType",
                 "http://www.w3.org/2005/08/addressing^^RelatesTo":"http://www.w3.org/2005/08/addressing^^RelatesToType",
                 "http://www.w3.org/2005/08/addressing^^ReplyTo":"http://www.w3.org/2005/08/addressing^^EndpointReferenceType",
                 "http://www.w3.org/2005/08/addressing^^From":"http://www.w3.org/2005/08/addressing^^EndpointReferenceType",
                 "http://www.w3.org/2005/08/addressing^^FaultTo":"http://www.w3.org/2005/08/addressing^^EndpointReferenceType",
                 "http://www.w3.org/2005/08/addressing^^To":"http://www.w3.org/2005/08/addressing^^AttributedURIType",
                 "http://www.w3.org/2005/08/addressing^^Action":"http://www.w3.org/2005/08/addressing^^AttributedURIType",
                 "http://www.w3.org/2005/08/addressing^^RetryAfter":"http://www.w3.org/2005/08/addressing^^AttributedUnsignedLongType",
                 "http://www.w3.org/2005/08/addressing^^ProblemHeaderQName":"http://www.w3.org/2005/08/addressing^^AttributedQNameType",
                 "http://www.w3.org/2005/08/addressing^^ProblemHeader":"http://www.w3.org/2005/08/addressing^^AttributedAnyType",
                 "http://www.w3.org/2005/08/addressing^^ProblemIRI":"http://www.w3.org/2005/08/addressing^^AttributedURIType",
                 "http://www.w3.org/2005/08/addressing^^ProblemAction":"http://www.w3.org/2005/08/addressing^^ProblemActionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityToken":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponse":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedSecurityToken":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedSecurityTokenType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^BinarySecret":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^BinarySecretType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Claims":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ClaimsType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Entropy":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^EntropyType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Lifetime":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^LifetimeType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenCollection":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenCollectionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseCollection":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseCollectionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedAttachedReference":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedReferenceType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedUnattachedReference":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedReferenceType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedProofToken":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedProofTokenType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^IssuedTokens":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestSecurityTokenResponseCollectionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RenewTarget":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RenewTargetType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^AllowPostdating":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^AllowPostdatingType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Renewing":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RenewingType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^CancelTarget":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^CancelTargetType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedTokenCancelled":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestedTokenCancelledType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ValidateTarget":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ValidateTargetType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Status":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^StatusType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SignChallenge":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SignChallengeType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SignChallengeResponse":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^SignChallengeType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^BinaryExchange":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^BinaryExchangeType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestKET":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^RequestKETType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^KeyExchangeToken":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^KeyExchangeTokenType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Authenticator":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^AuthenticatorType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^OnBehalfOf":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^OnBehalfOfType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Issuer":"http://www.w3.org/2005/08/addressing^^EndpointReferenceType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Encryption":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^EncryptionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ProofEncryption":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ProofEncryptionType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^UseKey":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^UseKeyType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^DelegateTo":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^DelegateToType",
                 "http://docs.oasis-open.org/ws-sx/ws-trust/200512^^Participants":"http://docs.oasis-open.org/ws-sx/ws-trust/200512^^ParticipantsType",
                 "http://www.w3.org/2006/05/addressing/wsdl^^ServiceName":"http://www.w3.org/2006/05/addressing/wsdl^^ServiceNameType",
                 "http://www.w3.org/2006/05/addressing/wsdl^^InterfaceName":"http://www.w3.org/2006/05/addressing/wsdl^^AttributedQNameType",
             ]
        }
    }
    
    var envelopeString:String?{
        return xml?.rootElement()?.xmlString
    }
    
    @discardableResult func createEnvelopeXml() throws -> DDXMLDocument
    {
        var envelope:String?
        if soapVersion == EPA_FdV_AUTHN_RequestResultHandler.SOAPVERSION_12
        {
            envelope = String("<soap:Envelope xmlns:c=\"http://www.w3.org/2003/05/soap-encoding\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"></soap:Envelope>")
        }
        else
        {
            envelope = String("<soap:Envelope xmlns:c=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"></soap:Envelope>")
        }
    
        xml = try DDXMLDocument(xmlString: envelope!, options: 0)
    
        let root=xml!.rootElement()
        Header=DDXMLElement(name: "soap:Header")
        Body=DDXMLElement(name: "soap:Body")
        root?.addChild(Header!)
        root?.addChild(Body!)
        return xml!
    }

    public func getAny(node:DDXMLElement) -> Any
    {
        if self.CreateClassesForAny
        {
            var key=node.uri!+"^^"+node.localName!
            let tempKey=EPA_FdV_AUTHN_RequestResultHandler.elementNames!.object(forKey:key) as? String
            if tempKey != nil
            {
                key=tempKey!
            }
            let type = EPA_FdV_AUTHN_RequestResultHandler.classNames!.object(forKey:key)
            if type != nil
            {
                let obj=createInstance(type: type as! NSObject.Type ,node:node, request:self)
                return obj
            }
        }
        return node;
    }    
    func createObject(node:DDXMLElement, type:NSObject.Type) throws ->NSObject?
    {
        var localType:NSObject.Type=type
        var localNode=node
        let refAttr=EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"Ref", url:EPA_FdV_AUTHN_Helper.MS_SERIALIZATION_NS)
        if refAttr != nil
        {
            return referencesTable[refAttr!.stringValue!]!
        }
    
        let nilAttr=EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"nil", url:EPA_FdV_AUTHN_Helper.XSI)
        if nilAttr != nil && EPA_FdV_AUTHN_Helper.toBoolFromString(str: nilAttr!.stringValue!)
        {
            return nil
        }
    
        let typeAttr=EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"type", url:EPA_FdV_AUTHN_Helper.XSI)
        if typeAttr != nil
        {
            let attrValue = typeAttr!.stringValue!
            let splitString=attrValue.components(separatedBy:":")
            let namespace=node.resolveNamespace(forName: attrValue)
            let typeName=splitString.count == 2 ? splitString[1] : attrValue
            if namespace != nil
            {
                let classType=namespace!.stringValue!+"^^"+typeName
                let temp:NSObject.Type?=EPA_FdV_AUTHN_RequestResultHandler.classNames!.object(forKey: classType) as? NSObject.Type
                if temp != nil
                {
                    localType=temp!
                }
            }
        }
    
        var hrefAttr = EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"href", url:"")
        if hrefAttr == nil
        {
            hrefAttr = EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"ref", url:"")
        }
        if hrefAttr != nil
        {
            let str=hrefAttr!.stringValue!
            let index=str.index(str.startIndex,offsetBy:1)
            let hrefId = String(str[index...])
            let xpathQuery=String(format:"//*[@id='%@']",hrefId)
            let nodes = try node.rootDocument!.nodes(forXPath:xpathQuery)
    
            if nodes.count>0
            {
                localNode=nodes[0] as! DDXMLElement
            }
        }
    
        let obj=createInstance(type: localType ,node:localNode, request:self)
    
        return obj
    }
    
    func createInstance(type:NSObject.Type, node:DDXMLElement, request:EPA_FdV_AUTHN_RequestResultHandler) ->NSObject
    {
        let allocObj=type.init()  as!EPA_FdV_AUTHN_ISerializableObject
        let idAttr = EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"Id", url:EPA_FdV_AUTHN_Helper.MS_SERIALIZATION_NS)
        if idAttr != nil
        {
            referencesTable[idAttr!.stringValue!]=(allocObj as! NSObject)
        }
        allocObj.loadWithXml(__node: node,__request:self)
        return allocObj as! NSObject
    }
    
    func getNamespacePrefix(url:String?, propertyElement:DDXMLElement) ->String?
    {
        if url == nil || url!.isEmpty
        {
            return nil
        }
        let rootElement=propertyElement.rootDocument!.rootElement()
        
        var prefix = namespaces![url! as NSObject]
        if prefix == nil
        {
            prefix=String(format:"n%lu",namespaces!.count+1)
            let ns=DDXMLNode.namespace(withName:prefix! ,stringValue: url!)
            rootElement!.addNamespace(ns as! DDXMLNode)
            namespaces![prefix! as NSObject]=url!
        }
        return prefix
    }
    
    func getXmlFullName( name:String, URI:String? ,propertyElement:DDXMLElement)  ->String
    {
        let prefix=getNamespacePrefix(url: URI ,propertyElement: propertyElement)
        var fullname=name
        if prefix != nil
        {
            fullname=prefix!+":"+name
        }
        return fullname
    }
    
    @discardableResult func addAttribute(name:String, URI:String?, stringValue:String, element:DDXMLElement)  -> DDXMLNode
    {
        let fullname=getXmlFullName(name: name, URI:URI, propertyElement:element)
        let refAttr=DDXMLNode.attribute(withName:fullname, stringValue:stringValue) as! DDXMLNode
        element.addAttribute(refAttr)
        return refAttr
    }
    
    @discardableResult func writeElement (name:String, URI: String, parent:DDXMLElement)  -> DDXMLElement
    {
        let fullname = getXmlFullName(name: name ,URI: URI ,propertyElement: parent)
        let propertyElement=DDXMLElement(name:fullname)
        parent.addChild(propertyElement)
        return propertyElement
    }
    
    @discardableResult func writeElement(obj:Any?, type:Any.Type, name:String, URI:String, parent:DDXMLElement, skipNullProperty:Bool)  -> DDXMLElement?
    {
        if obj == nil && skipNullProperty
        {
            return nil
        }
        let propertyElement=writeElement(name: name, URI:URI, parent:parent)
    
        if obj==nil
        {
            addAttribute(name: "nil", URI:EPA_FdV_AUTHN_Helper.XSI, stringValue:"true", element:propertyElement)
            return nil
        }
        
        if  obj is EPA_FdV_AUTHN_IReferenceObject
        {
            let anyObj = obj as! NSObject
            let key=NSValue(nonretainedObject: anyObj)
            var idStr=reverseReferencesTable[key];
            if idStr != nil
            {
                addAttribute(name: "Ref" ,URI:EPA_FdV_AUTHN_Helper.MS_SERIALIZATION_NS ,stringValue:idStr!, element:propertyElement)
                return nil
            }
            
            idStr=String(format:"i%lu",reverseReferencesTable.count+1)
            addAttribute(name: "Id", URI:EPA_FdV_AUTHN_Helper.MS_SERIALIZATION_NS, stringValue:idStr!, element:propertyElement)
            reverseReferencesTable[key]=idStr
        }
    
        if let anyObj = obj as? NSObject
        {
            let currentType=Swift.type(of:anyObj);
            if currentType != type.self
            {
                let xmlType=EPA_FdV_AUTHN_RequestResultHandler.classNames?.allKeys(for: currentType).last as? String
                //let xmlType=RequestResultHandler.classNames?.keysForValue(currentType!).last
                //let xmlType=RequestResultHandler.classNames.allKeysForValue(currentType!).last
                if xmlType != nil
                {
                    
                    let splitType = xmlType!.components(separatedBy:"^^")
                    let fullname=getXmlFullName(name: splitType[1], URI:splitType[0], propertyElement:propertyElement)
                    addAttribute(name: "type" ,URI:EPA_FdV_AUTHN_Helper.XSI, stringValue:fullname, element:propertyElement)
                }
                
            }
        }
        
        return propertyElement
    }
    
    func setResponse(responseData:Data, response:URLResponse?) throws
    {
        if self.EnableLogging
        {
            let strResponse=String(data: responseData, encoding: String.Encoding.utf8)
            NSLog("%@",strResponse!)
        }
        let __doc = try DDXMLDocument(data: responseData, options: 0)
        let __root=__doc.rootElement()
        if __root == nil
        {
            let errorMessage = String(data: responseData, encoding:String.Encoding.utf8)
            OutputFault=NSError(domain: errorMessage!, code:0, userInfo:nil)
            return
        }
        OutputBody=EPA_FdV_AUTHN_Helper.getNode(node: __root,  name:"Body", URI:envNS)
        OutputHeader=EPA_FdV_AUTHN_Helper.getNode(node: __root,  name:"Header", URI:envNS)
        if OutputBody == nil
        {
            let errorMessage = String(data: responseData, encoding:String.Encoding.utf8)
            OutputFault=NSError(domain: errorMessage!, code:0, userInfo:nil)
            return
        }
        let fault=EPA_FdV_AUTHN_Helper.getNode(node: OutputBody!, name:"Fault",URI:envNS)
        if fault != nil
        {
            var faultString=EPA_FdV_AUTHN_Helper.getNode(node: fault!, name:"faultstring")
            if faultString == nil
            {
                let reasonNode=EPA_FdV_AUTHN_Helper.getNode(node: fault!, name:"Reason")
                if reasonNode != nil
                {
                    faultString=EPA_FdV_AUTHN_Helper.getNode(node: reasonNode!, name:"Text")
                }
            }
            var faultObj:AnyObject?=nil;
            var faultDetail=EPA_FdV_AUTHN_Helper.getNode(node: fault!, name:"detail")
            if faultDetail == nil
            {
                faultDetail=EPA_FdV_AUTHN_Helper.getNode(node: fault!, name:"Detail")
            }
            if faultDetail != nil
            {
                let faultClass=faultDetail!.child(at:0) as? DDXMLElement
                if faultClass != nil
                {
                    let typeName=faultClass!.localName!
                    let namespaceNode=faultClass!.resolveNamespace(forName:typeName)
                    var namespace:String?=nil;
                    if(namespaceNode==nil)
                    {
                        namespace=faultClass!.uri
                    }
                    else
                    {
                        namespace=namespaceNode!.stringValue
                    }
                    let classType=String(format:"%@^^%@",namespace!,typeName)
                    let temp=EPA_FdV_AUTHN_RequestResultHandler.classNames!.object( forKey: classType)
                    if temp != nil
                    {
                        faultObj = createInstance(type: temp as! NSObject.Type, node:faultClass!, request:self)
                    }
                }
            }
    
            OutputFault=EPA_FdV_AUTHN_SoapError(message: faultString!.stringValue!, details:faultObj)
        }
    }
    
    func createNSURLSession () -> URLSession
    {
        let sessionConfiguration = URLSessionConfiguration.default
        let connection = URLSession(configuration: sessionConfiguration)
        return connection
    }
    
    func sendImplementation(request:URLRequest) throws
    {
        if self.EnableLogging
        {
            let strRequest = String(data: request.httpBody!, encoding: String.Encoding.utf8)
            NSLog("%@\n", strRequest!)
        }
    
        var response:URLResponse?
        var data:Data?
        var innerError:Error?
    
        let sem = DispatchSemaphore(value: 0)
    
        let connection=createNSURLSession()
        let task = connection.dataTask(with: request,completionHandler: {
            taskData, responseObj ,error ->() in
            
            if error != nil
            {
                innerError=error!
            }
            if responseObj != nil
            {
                response=responseObj!
            }
            if error == nil
            {
                data=taskData
            }
            sem.signal()
        })
        task.resume()
        
        _ = sem.wait(timeout: DispatchTime.distantFuture)
        if data == nil{
            OutputFault = innerError
        }
        else
        {
            try setResponse(responseData: data!, response: response!)
        }
    }
    
    
    
    func sendImplementation(request:URLRequest,  callbackDelegate: @escaping(EPA_FdV_AUTHN_RequestResultHandler) -> ()) throws
    {
        if self.EnableLogging
        {
            let strRequest = String(data: request.httpBody!, encoding: String.Encoding.utf8)
            NSLog("%@\n", strRequest!)
        }
        let connection=createNSURLSession()
        networkTask=connection.dataTask(with: request,completionHandler: {
            taskData, responseObj ,error ->() in
            self.OutputFault=error
            if error == nil
            {
                do{
                    try self.setResponse(responseData:taskData!, response: responseObj!)
                }
                catch
                {
                    let httpResponse=(responseObj as? HTTPURLResponse)
                    self.OutputFault = NSError(domain: HTTPURLResponse.localizedString(forStatusCode: httpResponse!.statusCode), code: httpResponse!.statusCode)
                }
            }
            
            if self.OutputFault == nil || self.OutputFault?._code != NSURLErrorCancelled
            {
                callbackDelegate(self)
            }

            self.networkTask=nil
        })
        
        networkTask?.resume()
    }
    
    func Cancel()
    {
        if networkTask != nil
        {
            networkTask?.cancel()
            networkTask=nil
        }
    }
    
    func prepareRequest(__requestObj:inout URLRequest)
    {
        var __soapMessageData:Data?
            __soapMessageData=envelopeString!.data(using: String.Encoding.utf8)
            __requestObj.addValue(soapVersion==EPA_FdV_AUTHN_RequestResultHandler.SOAPVERSION_12 ? "application/soap+xml; charset=utf-8" : "text/xml; charset=utf-8", forHTTPHeaderField: "Content-Type")
        let msgLength=String(format: "%u", __soapMessageData!.count)
    
        __requestObj.addValue(msgLength, forHTTPHeaderField:"Content-Length")
        __requestObj.httpBody=__soapMessageData
    }


    func setBinary(propertyElement:DDXMLNode, data:Data, isSwaRef:Bool, isAttribute:Bool)
    {
        propertyElement.stringValue = EPA_FdV_AUTHN_Helper.base64forData(data: data)
    }

    func getBinary(element:DDXMLNode, isSwaRef:Bool, isAttribute:Bool) -> Data
    {
        return EPA_FdV_AUTHN_Helper.base64DataFromString(string: element.stringValue!)
    }    


    func addWS_addressingHeaders(action:String,replyTo:String, to:String, referenceParameters:[String])
    {
        var __wsaddressingElement=writeElement(name: "Action", URI:"http://www.w3.org/2005/08/addressing", parent:self.Header!)
        __wsaddressingElement.stringValue = action
        addAttribute(name: "mustUnderstand", URI:envNS, stringValue:"1", element:__wsaddressingElement)
        __wsaddressingElement=writeElement(name: "MessageID", URI:"http://www.w3.org/2005/08/addressing", parent:self.Header!)
        __wsaddressingElement.stringValue = "urn:uuid:" + EPA_FdV_AUTHN_Helper.createGuid()
        __wsaddressingElement=writeElement(name: "ReplyTo", URI:"http://www.w3.org/2005/08/addressing", parent:self.Header!)
        __wsaddressingElement=writeElement(name: "Address", URI:"http://www.w3.org/2005/08/addressing", parent:__wsaddressingElement)
        __wsaddressingElement.stringValue = replyTo
        __wsaddressingElement=writeElement(name: "To", URI:"http://www.w3.org/2005/08/addressing", parent:self.Header!)
        __wsaddressingElement.stringValue = to
        addAttribute(name: "mustUnderstand", URI:envNS, stringValue:"1", element:__wsaddressingElement)
        for param in referenceParameters
        {
            let __doc=try! DDXMLDocument(xmlString:param, options:0)
            let root=__doc.rootElement()
            root!.detach()
            self.Header!.addChild(root!)
            addAttribute(name: "IsReferenceParameter", URI:"http://www.w3.org/2005/08/addressing", stringValue:"true", element:root!)
        }
    }

    func getAnyTypeValue(node:DDXMLElement) -> NSObject
    {
        let  typeAttr=EPA_FdV_AUTHN_Helper.getAttribute(node: node, name:"type", url:EPA_FdV_AUTHN_Helper.XSI)
        if typeAttr != nil
        {
            let attrValue=typeAttr!.stringValue
            let splitString=attrValue!.components(separatedBy:":")
            if splitString.count==2
            {
                let namespace=node.resolveNamespace(forName: attrValue!)
                if namespace?.stringValue == "http://www.w3.org/2001/XMLSchema"
                {
                    let value=splitString[1]
                    if value == "int" || value == "double" || value == "float" || value == "long" || value == "integer" || value == "byte" || value == "negativeInteger"
                        || value == "nonNegativeInteger" || value ==  "nonPositiveInteger" || value == "positiveInteger"  || value == "short" || value == "unsignedLong" || value == "unsignedInt" || value == "unsignedShort" || value == "unsignedByte"
                    {
                        return EPA_FdV_AUTHN_Helper.getNumber(stringNumber: node.stringValue, isDecimal:false)!
                    }
                    else if value == "decimal"
                    {
                        return EPA_FdV_AUTHN_Helper.getNumber(stringNumber: node.stringValue, isDecimal:true)!
                    }
                    else if value == "boolean"
                    {
                        return (node.stringValue! == "true") as NSObject
                    }
                    else
                    {
                        return node.stringValue! as NSObject
                    }
                }
                else
                {
                    let typeName=splitString.count==2 ? splitString[1] : attrValue
                    if namespace != nil
                    {
                        let classType=String(format:"%@^^%@",namespace!.stringValue!,typeName!)
                        let temp=EPA_FdV_AUTHN_RequestResultHandler.classNames!.object(forKey: classType) as? NSObject.Type
                        if temp != nil
                        {
                            return  createInstance(type: temp! ,node:node, request:self)
                        }
                    }
                }
            }
        }
        return node;
    }

    func setAnyTypeValue(item:NSObject, propertyElement:DDXMLElement)
    {
        if let obj1 = item as? EPA_FdV_AUTHN_ISerializableObject
        {
            obj1.serialize(__parent: propertyElement ,__request:self)
        }
        else if let str = item as? String
        {
            let prefix=getNamespacePrefix(url: "http://www.w3.org/2001/XMLSchema", propertyElement:propertyElement)
            addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:string", prefix!), element:propertyElement)
            propertyElement.stringValue = str
        }
        else if let number = item as? NSDecimalNumber
        {
            let prefix=getNamespacePrefix(url: "http://www.w3.org/2001/XMLSchema", propertyElement:propertyElement)
            addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:decimal", prefix!), element:propertyElement)
            propertyElement.stringValue = number.stringValue
        }
        else if let nsnumber = item as? NSNumber
        {
            let prefix=getNamespacePrefix(url: "http://www.w3.org/2001/XMLSchema", propertyElement:propertyElement)
            let cStrintType = String(cString: nsnumber.objCType)
            if cStrintType == "q"
            {
                addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:int", prefix!), element:propertyElement)
            }
            else if cStrintType == "f"
            {
                addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:float", prefix!), element:propertyElement)
            }
            else if cStrintType == "i"
            {
                addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:int", prefix!), element:propertyElement)
            }
            else if cStrintType == "c"
            {
               // print("bool")
                addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:boolean", prefix!), element:propertyElement)
            }
            else if cStrintType == "d"
            {
                //print("double")
                addAttribute(name: "type", URI:"http://www.w3.org/2001/XMLSchema-instance", stringValue:String(format:"%@:double", prefix!), element:propertyElement)
            }
            propertyElement.stringValue = nsnumber.stringValue
        }
        else
        {
            propertyElement.stringValue = item.description
        }
    }

}