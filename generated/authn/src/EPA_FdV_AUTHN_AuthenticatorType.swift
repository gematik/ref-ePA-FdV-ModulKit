//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.7.0.0
//
// Created by Quasar Development 
//
//---------------------------------------------------

import Foundation


public class EPA_FdV_AUTHN_AuthenticatorType : NSObject ,EPA_FdV_AUTHN_ISerializableObject
{
    private var  __source:DDXMLNode? = nil
    

    var  CombinedHash:Data?=Data()

    var any=[Any]()

    public required override init()
    {
        super.init()
    }
    public func loadWithXml(__node: DDXMLElement, __request:EPA_FdV_AUTHN_RequestResultHandler)
    {
        __source=__node;
        for i :UInt in 0 ..< __node.childCount
        {
            let node=__node.child(at:i)
            if node?.kind==UInt(XMLElementKind)
            {
                let __node=node as! DDXMLElement
                if loadProperty(__node:__node, __request:__request) == false
                {
                    self.any.append(__request.getAny(node: __node))
                }
            }
        }
    }

    public  func serialize(__parent:DDXMLElement, __request:EPA_FdV_AUTHN_RequestResultHandler)
    {
        
            
        let __CombinedHashItemElement=__request.writeElement(obj: CombinedHash, type:Data.self, name:"CombinedHash", URI:"http://docs.oasis-open.org/ws-sx/ws-trust/200512", parent:__parent, skipNullProperty:true)
        if __CombinedHashItemElement != nil
        {
            __request.setBinary(propertyElement: __CombinedHashItemElement!, data:self.CombinedHash!, isSwaRef:false, isAttribute:false);
        }
            
        for case let elem as DDXMLNode in self.any
        {
            elem.detach()
            __parent.addChild(elem)
        }

    }

    public   func loadProperty(__node: DDXMLElement, __request: EPA_FdV_AUTHN_RequestResultHandler ) -> Bool
    {
        if __node.localName=="CombinedHash"
        {
            if EPA_FdV_AUTHN_Helper.isValue(node:__node, name: "CombinedHash")
            {
                self.CombinedHash = __request.getBinary(element: __node,isSwaRef:false, isAttribute:false)
            }
            return true;
        }
        return false
    }
    public func getOriginalXmlSource() ->DDXMLNode? 
    {
        return __source
    }
}